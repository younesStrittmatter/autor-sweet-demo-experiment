{"version":3,"file":"index.cjs","sources":["../src/ExtensionManager.ts","../src/modules/utils.ts","../src/modules/data/DataColumn.ts","../src/modules/data/utils.ts","../src/modules/data/DataCollection.ts","../src/modules/data/index.ts","../src/modules/plugin-api/KeyboardListenerAPI.ts","../src/modules/plugins.ts","../src/modules/plugin-api/AudioPlayer.ts","../src/modules/plugin-api/MediaAPI.ts","../src/modules/plugin-api/SimulationAPI.ts","../src/modules/plugin-api/TimeoutAPI.ts","../src/modules/plugin-api/index.ts","../src/modules/randomization.ts","../src/modules/turk.ts","../src/ProgressBar.ts","../src/timeline/index.ts","../src/timeline/util.ts","../src/timeline/TimelineNode.ts","../src/timeline/Trial.ts","../src/timeline/Timeline.ts","../src/JsPsych.ts","../src/migration.ts","../src/index.ts"],"sourcesContent":["import { Class } from \"type-fest\";\n\nimport { JsPsychExtension, JsPsychExtensionInfo } from \"./modules/extensions\";\nimport { TrialExtensionsConfiguration } from \"./timeline\";\n\nexport type GlobalExtensionsConfiguration = Array<{\n  type: Class<JsPsychExtension>;\n  params?: Record<string, any>;\n}>;\n\nexport interface ExtensionManagerDependencies {\n  /**\n   * Given an extension class, create a new instance of it and return it.\n   */\n  instantiateExtension(extensionClass: Class<JsPsychExtension>): JsPsychExtension;\n}\n\nexport class ExtensionManager {\n  private static getExtensionNameByClass(extensionClass: Class<JsPsychExtension>) {\n    return (extensionClass[\"info\"] as JsPsychExtensionInfo).name;\n  }\n\n  public readonly extensions: Record<string, JsPsychExtension>;\n\n  constructor(\n    private dependencies: ExtensionManagerDependencies,\n    private extensionsConfiguration: GlobalExtensionsConfiguration\n  ) {\n    this.extensions = Object.fromEntries(\n      extensionsConfiguration.map((extension) => [\n        ExtensionManager.getExtensionNameByClass(extension.type),\n        this.dependencies.instantiateExtension(extension.type),\n      ])\n    );\n  }\n\n  private getExtensionInstanceByClass(extensionClass: Class<JsPsychExtension>) {\n    return this.extensions[ExtensionManager.getExtensionNameByClass(extensionClass)];\n  }\n\n  public async initializeExtensions() {\n    await Promise.all(\n      this.extensionsConfiguration.map(({ type, params = {} }) => {\n        this.getExtensionInstanceByClass(type).initialize(params);\n\n        const extensionInfo = type[\"info\"] as JsPsychExtensionInfo;\n\n        if (!(\"version\" in extensionInfo) && !(\"data\" in extensionInfo)) {\n          console.warn(\n            extensionInfo[\"name\"],\n            \"is missing the 'version' and 'data' fields. Please update extension as 'version' and 'data' will be required in v9. See https://www.jspsych.org/latest/developers/extension-development/ for more details.\"\n          );\n        } else if (!(\"version\" in extensionInfo)) {\n          console.warn(\n            extensionInfo[\"name\"],\n            \"is missing the 'version' field. Please update extension as 'version' will be required in v9. See https://www.jspsych.org/latest/developers/extension-development/ for more details.\"\n          );\n        } else if (!(\"data\" in extensionInfo)) {\n          console.warn(\n            extensionInfo[\"name\"],\n            \"is missing the 'data' field. Please update extension as 'data' will be required in v9. See https://www.jspsych.org/latest/developers/extension-development/ for more details.\"\n          );\n        }\n      })\n    );\n  }\n\n  public onStart(trialExtensionsConfiguration: TrialExtensionsConfiguration = []) {\n    for (const { type, params } of trialExtensionsConfiguration) {\n      this.getExtensionInstanceByClass(type)?.on_start(params);\n    }\n  }\n\n  public onLoad(trialExtensionsConfiguration: TrialExtensionsConfiguration = []) {\n    for (const { type, params } of trialExtensionsConfiguration) {\n      this.getExtensionInstanceByClass(type)?.on_load(params);\n    }\n  }\n\n  public async onFinish(\n    trialExtensionsConfiguration: TrialExtensionsConfiguration = []\n  ): Promise<Record<string, any>> {\n    const results = await Promise.all(\n      trialExtensionsConfiguration.map(({ type, params }) =>\n        Promise.resolve(this.getExtensionInstanceByClass(type)?.on_finish(params))\n      )\n    );\n\n    const extensionInfos = trialExtensionsConfiguration.length\n      ? {\n          extension_type: trialExtensionsConfiguration.map(({ type }) => type[\"info\"].name),\n          extension_version: trialExtensionsConfiguration.map(({ type }) => type[\"info\"].version),\n        }\n      : {};\n\n    results.unshift(extensionInfos);\n\n    return Object.assign({}, ...results);\n  }\n}\n","/**\n * Finds all of the unique items in an array.\n * @param arr The array to extract unique values from\n * @returns An array with one copy of each unique item in `arr`\n */\nexport function unique(arr: Array<any>) {\n  return [...new Set(arr)];\n}\n\nexport function deepCopy(obj) {\n  if (!obj) return obj;\n  let out;\n  if (Array.isArray(obj)) {\n    out = [];\n    for (const x of obj) {\n      out.push(deepCopy(x));\n    }\n    return out;\n  } else if (typeof obj === \"object\" && obj !== null) {\n    out = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        out[key] = deepCopy(obj[key]);\n      }\n    }\n    return out;\n  } else {\n    return obj;\n  }\n}\n\n/**\n * Merges two objects, recursively.\n * @param obj1 Object to merge\n * @param obj2 Object to merge\n */\nexport function deepMerge(obj1: any, obj2: any): any {\n  let merged = {};\n  for (const key in obj1) {\n    if (obj1.hasOwnProperty(key)) {\n      if (typeof obj1[key] === \"object\" && obj2.hasOwnProperty(key)) {\n        merged[key] = deepMerge(obj1[key], obj2[key]);\n      } else {\n        merged[key] = obj1[key];\n      }\n    }\n  }\n  for (const key in obj2) {\n    if (obj2.hasOwnProperty(key)) {\n      if (!merged.hasOwnProperty(key)) {\n        merged[key] = obj2[key];\n      } else if (typeof obj2[key] === \"object\") {\n        merged[key] = deepMerge(merged[key], obj2[key]);\n      } else {\n        merged[key] = obj2[key];\n      }\n    }\n  }\n\n  return merged;\n}\n","export class DataColumn {\n  constructor(public values = []) {}\n\n  sum() {\n    let s = 0;\n    for (const v of this.values) {\n      s += v;\n    }\n    return s;\n  }\n\n  mean() {\n    let sum = 0;\n    let count = 0;\n    for (const value of this.values) {\n      if (typeof value !== \"undefined\" && value !== null) {\n        sum += value;\n        count++;\n      }\n    }\n    if (count === 0) {\n      return undefined;\n    }\n    return sum / count;\n  }\n\n  median() {\n    if (this.values.length === 0) {\n      return undefined;\n    }\n    const numbers = this.values.slice(0).sort(function (a, b) {\n      return a - b;\n    });\n    const middle = Math.floor(numbers.length / 2);\n    const isEven = numbers.length % 2 === 0;\n    return isEven ? (numbers[middle] + numbers[middle - 1]) / 2 : numbers[middle];\n  }\n\n  min() {\n    return Math.min.apply(null, this.values);\n  }\n\n  max() {\n    return Math.max.apply(null, this.values);\n  }\n\n  count() {\n    return this.values.length;\n  }\n\n  variance() {\n    const mean = this.mean();\n    let sum_square_error = 0;\n    for (const x of this.values) {\n      sum_square_error += Math.pow(x - mean, 2);\n    }\n    const mse = sum_square_error / (this.values.length - 1);\n    return mse;\n  }\n\n  sd() {\n    const mse = this.variance();\n    const rmse = Math.sqrt(mse);\n    return rmse;\n  }\n\n  frequencies() {\n    const unique = {};\n    for (const x of this.values) {\n      if (typeof unique[x] === \"undefined\") {\n        unique[x] = 1;\n      } else {\n        unique[x]++;\n      }\n    }\n    return unique;\n  }\n\n  all(eval_fn) {\n    for (const x of this.values) {\n      if (!eval_fn(x)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  subset(eval_fn) {\n    const out = [];\n    for (const x of this.values) {\n      if (eval_fn(x)) {\n        out.push(x);\n      }\n    }\n    return new DataColumn(out);\n  }\n}\n","// private function to save text file on local drive\nexport function saveTextToFile(textstr: string, filename: string) {\n  const blobToSave = new Blob([textstr], {\n    type: \"text/plain\",\n  });\n  let blobURL = \"\";\n  if (typeof window.webkitURL !== \"undefined\") {\n    blobURL = window.webkitURL.createObjectURL(blobToSave);\n  } else {\n    blobURL = window.URL.createObjectURL(blobToSave);\n  }\n\n  const link = document.createElement(\"a\");\n  link.id = \"jspsych-download-as-text-link\";\n  link.style.display = \"none\";\n  link.download = filename;\n  link.href = blobURL;\n  link.click();\n}\n\n// this function based on code suggested by StackOverflow users:\n// http://stackoverflow.com/users/64741/zachary\n// http://stackoverflow.com/users/317/joseph-sturtevant\n\nexport function JSON2CSV(objArray) {\n  const array = typeof objArray != \"object\" ? JSON.parse(objArray) : objArray;\n  let line = \"\";\n  let result = \"\";\n  const columns = [];\n\n  for (const row of array) {\n    for (const key in row) {\n      let keyString = key + \"\";\n      keyString = '\"' + keyString.replace(/\"/g, '\"\"') + '\",';\n      if (!columns.includes(key)) {\n        columns.push(key);\n        line += keyString;\n      }\n    }\n  }\n\n  line = line.slice(0, -1); // removes last comma\n  result += line + \"\\r\\n\";\n\n  for (const row of array) {\n    line = \"\";\n    for (const col of columns) {\n      let value = typeof row[col] === \"undefined\" ? \"\" : row[col];\n      if (typeof value == \"object\") {\n        value = JSON.stringify(value);\n      }\n      const valueString = value + \"\";\n      line += '\"' + valueString.replace(/\"/g, '\"\"') + '\",';\n    }\n\n    line = line.slice(0, -1);\n    result += line + \"\\r\\n\";\n  }\n\n  return result;\n}\n\n// this function is modified from StackOverflow:\n// http://stackoverflow.com/posts/3855394\n\nexport function getQueryString() {\n  const a = window.location.search.substr(1).split(\"&\");\n  const b = {};\n  for (let i = 0; i < a.length; ++i) {\n    const p = a[i].split(\"=\", 2);\n    if (p.length == 1) b[p[0]] = \"\";\n    else b[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n  }\n  return b;\n}\n","import { deepCopy } from \"../utils\";\nimport { DataColumn } from \"./DataColumn\";\nimport { JSON2CSV, saveTextToFile } from \"./utils\";\n\nexport class DataCollection {\n  private trials: any[];\n\n  constructor(data = []) {\n    this.trials = data;\n  }\n\n  push(new_data) {\n    this.trials.push(new_data);\n    return this;\n  }\n\n  join(other_data_collection: DataCollection) {\n    this.trials = this.trials.concat(other_data_collection.values());\n    return this;\n  }\n\n  top() {\n    if (this.trials.length <= 1) {\n      return this;\n    } else {\n      return new DataCollection([this.trials[this.trials.length - 1]]);\n    }\n  }\n\n  /**\n   * Queries the first n elements in a collection of trials.\n   *\n   * @param n A positive integer of elements to return. A value of\n   *          n that is less than 1 will throw an error.\n   *\n   * @return First n objects of a collection of trials. If fewer than\n   *         n trials are available, the trials.length elements will\n   *         be returned.\n   *\n   */\n  first(n = 1) {\n    if (n < 1) {\n      throw `You must query with a positive nonzero integer. Please use a\n               different value for n.`;\n    }\n    if (this.trials.length === 0) return new DataCollection();\n    if (n > this.trials.length) n = this.trials.length;\n    return new DataCollection(this.trials.slice(0, n));\n  }\n\n  /**\n   * Queries the last n elements in a collection of trials.\n   *\n   * @param n A positive integer of elements to return. A value of\n   *          n that is less than 1 will throw an error.\n   *\n   * @return Last n objects of a collection of trials. If fewer than\n   *         n trials are available, the trials.length elements will\n   *         be returned.\n   *\n   */\n  last(n = 1) {\n    if (n < 1) {\n      throw `You must query with a positive nonzero integer. Please use a\n               different value for n.`;\n    }\n    if (this.trials.length === 0) return new DataCollection();\n    if (n > this.trials.length) n = this.trials.length;\n    return new DataCollection(this.trials.slice(this.trials.length - n, this.trials.length));\n  }\n\n  values() {\n    return this.trials;\n  }\n\n  count() {\n    return this.trials.length;\n  }\n\n  readOnly() {\n    return new DataCollection(deepCopy(this.trials));\n  }\n\n  addToAll(properties) {\n    for (const trial of this.trials) {\n      Object.assign(trial, properties);\n    }\n    return this;\n  }\n\n  addToLast(properties) {\n    if (this.trials.length > 0) {\n      Object.assign(this.trials[this.trials.length - 1], properties);\n    }\n    return this;\n  }\n\n  filter(filters) {\n    // [{p1: v1, p2:v2}, {p1:v2}]\n    // {p1: v1}\n    let f;\n    if (!Array.isArray(filters)) {\n      f = deepCopy([filters]);\n    } else {\n      f = deepCopy(filters);\n    }\n\n    const filtered_data = [];\n    for (const trial of this.trials) {\n      let keep = false;\n      for (const filter of f) {\n        let match = true;\n        for (const key of Object.keys(filter)) {\n          if (typeof trial[key] !== \"undefined\" && trial[key] === filter[key]) {\n            // matches on this key!\n          } else {\n            match = false;\n          }\n        }\n        if (match) {\n          keep = true;\n          break;\n        } // can break because each filter is OR.\n      }\n      if (keep) {\n        filtered_data.push(trial);\n      }\n    }\n\n    return new DataCollection(filtered_data);\n  }\n\n  filterCustom(fn) {\n    return new DataCollection(this.trials.filter(fn));\n  }\n\n  filterColumns(columns: Array<string>) {\n    return new DataCollection(\n      this.trials.map((trial) =>\n        Object.fromEntries(columns.filter((key) => key in trial).map((key) => [key, trial[key]]))\n      )\n    );\n  }\n\n  select(column) {\n    const values = [];\n    for (const trial of this.trials) {\n      if (typeof trial[column] !== \"undefined\") {\n        values.push(trial[column]);\n      }\n    }\n    return new DataColumn(values);\n  }\n\n  ignore(columns) {\n    if (!Array.isArray(columns)) {\n      columns = [columns];\n    }\n    const o = deepCopy(this.trials);\n    for (const trial of o) {\n      for (const delete_key of columns) {\n        delete trial[delete_key];\n      }\n    }\n    return new DataCollection(o);\n  }\n\n  uniqueNames() {\n    const names = [];\n\n    for (const trial of this.trials) {\n      for (const key of Object.keys(trial)) {\n        if (!names.includes(key)) {\n          names.push(key);\n        }\n      }\n    }\n\n    return names;\n  }\n\n  csv() {\n    return JSON2CSV(this.trials);\n  }\n\n  json(pretty = false) {\n    if (pretty) {\n      return JSON.stringify(this.trials, null, \"\\t\");\n    }\n    return JSON.stringify(this.trials);\n  }\n\n  localSave(format, filename) {\n    format = format.toLowerCase();\n    let data_string;\n    if (format === \"json\") {\n      data_string = this.json();\n    } else if (format === \"csv\") {\n      data_string = this.csv();\n    } else {\n      throw new Error('Invalid format specified for localSave. Must be \"json\" or \"csv\".');\n    }\n\n    saveTextToFile(data_string, filename);\n  }\n}\n","import { TrialResult } from \"../../timeline\";\nimport { Trial } from \"../../timeline/Trial\";\nimport { DataCollection } from \"./DataCollection\";\nimport { getQueryString } from \"./utils\";\n\nexport type InteractionEvent = \"blur\" | \"focus\" | \"fullscreenenter\" | \"fullscreenexit\";\n\nexport interface InteractionRecord {\n  event: InteractionEvent;\n  trial: number;\n  time: number;\n}\n\n/**\n * Functions and options needed by the `JsPsychData` module\n */\nexport interface JsPsychDataDependencies {\n  /**\n   * Returns progress information for interaction records.\n   */\n  getProgress: () => { trial: number; time: number };\n\n  onInteractionRecordAdded: (record: InteractionRecord) => void;\n\n  getDisplayElement: () => HTMLElement;\n}\n\nexport class JsPsychData {\n  private results: DataCollection;\n  private resultToTrialMap: WeakMap<TrialResult, Trial>;\n\n  /** Browser interaction event data */\n  private interactionRecords: DataCollection;\n\n  /** Data properties for all trials */\n  private dataProperties = {};\n\n  // cache the query_string\n  private query_string;\n\n  constructor(private dependencies: JsPsychDataDependencies) {\n    this.reset();\n  }\n\n  reset() {\n    this.results = new DataCollection();\n    this.resultToTrialMap = new WeakMap<TrialResult, Trial>();\n    this.interactionRecords = new DataCollection();\n  }\n\n  get() {\n    return this.results;\n  }\n\n  getInteractionData() {\n    return this.interactionRecords;\n  }\n\n  write(trial: Trial) {\n    const result = trial.getResult();\n    Object.assign(result, this.dataProperties);\n    this.results.push(result);\n    this.resultToTrialMap.set(result, trial);\n  }\n\n  addProperties(properties) {\n    // first, add the properties to all data that's already stored\n    this.results.addToAll(properties);\n\n    // now add to list so that it gets appended to all future data\n    this.dataProperties = Object.assign({}, this.dataProperties, properties);\n  }\n\n  addDataToLastTrial(data) {\n    this.results.addToLast(data);\n  }\n\n  getLastTrialData() {\n    return this.results.top();\n  }\n\n  getLastTimelineData() {\n    const lastResult = this.getLastTrialData().values()[0];\n\n    return new DataCollection(\n      lastResult ? this.resultToTrialMap.get(lastResult).parent.getResults() : []\n    );\n  }\n\n  displayData(format = \"json\") {\n    format = format.toLowerCase();\n    if (format !== \"json\" && format !== \"csv\") {\n      console.log(\"Invalid format declared for displayData function. Using json as default.\");\n      format = \"json\";\n    }\n\n    const dataContainer = document.createElement(\"pre\");\n    dataContainer.id = \"jspsych-data-display\";\n    dataContainer.textContent = format === \"json\" ? this.results.json(true) : this.results.csv();\n\n    this.dependencies.getDisplayElement().replaceChildren(dataContainer);\n  }\n\n  urlVariables() {\n    if (typeof this.query_string == \"undefined\") {\n      this.query_string = getQueryString();\n    }\n    return this.query_string;\n  }\n\n  getURLVariable(whichvar) {\n    return this.urlVariables()[whichvar];\n  }\n\n  private addInteractionRecord(event: InteractionEvent) {\n    const record: InteractionRecord = { event, ...this.dependencies.getProgress() };\n    this.interactionRecords.push(record);\n    this.dependencies.onInteractionRecordAdded(record);\n  }\n\n  private interactionListeners = {\n    blur: () => {\n      this.addInteractionRecord(\"blur\");\n    },\n    focus: () => {\n      this.addInteractionRecord(\"focus\");\n    },\n    fullscreenchange: () => {\n      this.addInteractionRecord(\n        // @ts-expect-error\n        document.isFullScreen ||\n          // @ts-expect-error\n          document.webkitIsFullScreen ||\n          // @ts-expect-error\n          document.mozIsFullScreen ||\n          document.fullscreenElement\n          ? \"fullscreenenter\"\n          : \"fullscreenexit\"\n      );\n    },\n  };\n\n  createInteractionListeners() {\n    window.addEventListener(\"blur\", this.interactionListeners.blur);\n    window.addEventListener(\"focus\", this.interactionListeners.focus);\n\n    document.addEventListener(\"fullscreenchange\", this.interactionListeners.fullscreenchange);\n    document.addEventListener(\"mozfullscreenchange\", this.interactionListeners.fullscreenchange);\n    document.addEventListener(\"webkitfullscreenchange\", this.interactionListeners.fullscreenchange);\n  }\n\n  removeInteractionListeners() {\n    window.removeEventListener(\"blur\", this.interactionListeners.blur);\n    window.removeEventListener(\"focus\", this.interactionListeners.focus);\n\n    document.removeEventListener(\"fullscreenchange\", this.interactionListeners.fullscreenchange);\n    document.removeEventListener(\"mozfullscreenchange\", this.interactionListeners.fullscreenchange);\n    document.removeEventListener(\n      \"webkitfullscreenchange\",\n      this.interactionListeners.fullscreenchange\n    );\n  }\n}\n","import autoBind from \"auto-bind\";\n\nexport type KeyboardListener = (e: KeyboardEvent) => void;\n\nexport type ValidResponses = string[] | \"ALL_KEYS\" | \"NO_KEYS\";\n\nexport interface GetKeyboardResponseOptions {\n  callback_function: any;\n  valid_responses?: ValidResponses;\n  rt_method?: \"performance\" | \"audio\";\n  persist?: boolean;\n  audio_context?: AudioContext;\n  audio_context_start_time?: number;\n  allow_held_key?: boolean;\n  minimum_valid_rt?: number;\n}\n\nexport class KeyboardListenerAPI {\n  constructor(\n    private getRootElement: () => Element | undefined,\n    private areResponsesCaseSensitive: boolean = false,\n    private minimumValidRt = 0\n  ) {\n    autoBind(this);\n    this.registerRootListeners();\n  }\n\n  private listeners = new Set<KeyboardListener>();\n  private heldKeys = new Set<string>();\n\n  private areRootListenersRegistered = false;\n\n  /**\n   * If not previously done and `this.getRootElement()` returns an element, adds the root key\n   * listeners to that element.\n   */\n  private registerRootListeners() {\n    if (!this.areRootListenersRegistered) {\n      const rootElement = this.getRootElement();\n      if (rootElement) {\n        rootElement.addEventListener(\"keydown\", this.rootKeydownListener);\n        rootElement.addEventListener(\"keyup\", this.rootKeyupListener);\n        this.areRootListenersRegistered = true;\n      }\n    }\n  }\n\n  private rootKeydownListener(e: KeyboardEvent) {\n    // Iterate over a static copy of the listeners set because listeners might add other listeners\n    // that we do not want to be included in the loop\n    for (const listener of Array.from(this.listeners)) {\n      listener(e);\n    }\n    this.heldKeys.add(this.toLowerCaseIfInsensitive(e.key));\n  }\n\n  private toLowerCaseIfInsensitive(string: string) {\n    return this.areResponsesCaseSensitive ? string : string.toLowerCase();\n  }\n\n  private rootKeyupListener(e: KeyboardEvent) {\n    this.heldKeys.delete(this.toLowerCaseIfInsensitive(e.key));\n  }\n\n  private isResponseValid(validResponses: ValidResponses, allowHeldKey: boolean, key: string) {\n    // check if key was already held down\n    if (!allowHeldKey && this.heldKeys.has(key)) {\n      return false;\n    }\n\n    if (validResponses === \"ALL_KEYS\") {\n      return true;\n    }\n    if (validResponses === \"NO_KEYS\") {\n      return false;\n    }\n\n    return validResponses.includes(key);\n  }\n\n  getKeyboardResponse({\n    callback_function,\n    valid_responses = \"ALL_KEYS\",\n    rt_method = \"performance\",\n    persist,\n    audio_context,\n    audio_context_start_time,\n    allow_held_key = false,\n    minimum_valid_rt = this.minimumValidRt,\n  }: GetKeyboardResponseOptions) {\n    if (rt_method !== \"performance\" && rt_method !== \"audio\") {\n      console.log(\n        'Invalid RT method specified in getKeyboardResponse. Defaulting to \"performance\" method.'\n      );\n      rt_method = \"performance\";\n    }\n\n    const usePerformanceRt = rt_method === \"performance\";\n    const startTime = usePerformanceRt ? performance.now() : audio_context_start_time * 1000;\n\n    this.registerRootListeners();\n\n    if (!this.areResponsesCaseSensitive && typeof valid_responses !== \"string\") {\n      valid_responses = valid_responses.map((r) => r.toLowerCase());\n    }\n\n    const listener: KeyboardListener = (e) => {\n      const rt = Math.round(\n        (rt_method == \"performance\" ? performance.now() : audio_context.currentTime * 1000) -\n          startTime\n      );\n      if (rt < minimum_valid_rt) {\n        return;\n      }\n\n      const key = this.toLowerCaseIfInsensitive(e.key);\n\n      if (this.isResponseValid(valid_responses, allow_held_key, key)) {\n        // if this is a valid response, then we don't want the key event to trigger other actions\n        // like scrolling via the spacebar.\n        e.preventDefault();\n\n        if (!persist) {\n          // remove keyboard listener if it exists\n          this.cancelKeyboardResponse(listener);\n        }\n\n        callback_function({ key: e.key, rt });\n      }\n    };\n\n    this.listeners.add(listener);\n    return listener;\n  }\n\n  cancelKeyboardResponse(listener: KeyboardListener) {\n    // remove the listener from the set of listeners if it is contained\n    this.listeners.delete(listener);\n  }\n\n  cancelAllKeyboardResponses() {\n    this.listeners.clear();\n  }\n\n  compareKeys(key1: string | null, key2: string | null) {\n    if (\n      (typeof key1 !== \"string\" && key1 !== null) ||\n      (typeof key2 !== \"string\" && key2 !== null)\n    ) {\n      console.error(\n        \"Error in jsPsych.pluginAPI.compareKeys: arguments must be key strings or null.\"\n      );\n      return undefined;\n    }\n\n    if (typeof key1 === \"string\" && typeof key2 === \"string\") {\n      // if both values are strings, then check whether or not letter case should be converted before comparing (case_sensitive_responses in initJsPsych)\n      return this.areResponsesCaseSensitive\n        ? key1 === key2\n        : key1.toLowerCase() === key2.toLowerCase();\n    }\n\n    return key1 === null && key2 === null;\n  }\n}\n","import { SetRequired } from \"type-fest\";\n\nimport { SimulationMode, SimulationOptions, TrialDescription, TrialResult } from \"../timeline\";\n\n/**\n * Parameter types for plugins\n */\nexport enum ParameterType {\n  BOOL,\n  STRING,\n  INT,\n  FLOAT,\n  FUNCTION,\n  KEY,\n  KEYS,\n  SELECT,\n  HTML_STRING,\n  IMAGE,\n  AUDIO,\n  VIDEO,\n  OBJECT,\n  COMPLEX,\n  TIMELINE,\n}\n\ntype ParameterTypeMap = {\n  [ParameterType.BOOL]: boolean;\n  [ParameterType.STRING]: string;\n  [ParameterType.INT]: number;\n  [ParameterType.FLOAT]: number;\n  [ParameterType.FUNCTION]: (...args: any[]) => any;\n  [ParameterType.KEY]: string;\n  [ParameterType.KEYS]: string[] | \"ALL_KEYS\" | \"NO_KEYS\";\n  [ParameterType.SELECT]: any;\n  [ParameterType.HTML_STRING]: string;\n  [ParameterType.IMAGE]: string;\n  [ParameterType.AUDIO]: string;\n  [ParameterType.VIDEO]: string;\n  [ParameterType.OBJECT]: object;\n  [ParameterType.COMPLEX]: any;\n  [ParameterType.TIMELINE]: any;\n};\n\ntype PreloadParameterType = ParameterType.AUDIO | ParameterType.VIDEO | ParameterType.IMAGE;\n\nexport type ParameterInfo = (\n  | { type: Exclude<ParameterType, ParameterType.COMPLEX | PreloadParameterType> }\n  | { type: ParameterType.COMPLEX; nested?: ParameterInfos }\n  | { type: PreloadParameterType; preload?: boolean }\n) & {\n  array?: boolean;\n  pretty_name?: string;\n  default?: any;\n};\n\nexport type ParameterInfos = Record<string, ParameterInfo>;\n\ntype InferredParameter<I extends ParameterInfo> = I[\"array\"] extends true\n  ? Array<ParameterTypeMap[I[\"type\"]]>\n  : ParameterTypeMap[I[\"type\"]];\n\ntype RequiredParameterNames<I extends ParameterInfos> = {\n  [K in keyof I]: I[K][\"default\"] extends undefined ? K : never;\n}[keyof I];\n\ntype InferredParameters<I extends ParameterInfos> = SetRequired<\n  {\n    [Property in keyof I]?: InferredParameter<I[Property]>;\n  },\n  RequiredParameterNames<I>\n>;\n\nexport const universalPluginParameters = <const>{\n  /**\n   * Data to add to this trial (key-value pairs)\n   */\n  data: {\n    type: ParameterType.OBJECT,\n    pretty_name: \"Data\",\n    default: {},\n  },\n  /**\n   * Function to execute when trial begins\n   */\n  on_start: {\n    type: ParameterType.FUNCTION,\n    pretty_name: \"On start\",\n    default: function () {\n      return;\n    },\n  },\n  /**\n   * Function to execute when trial is finished\n   */\n  on_finish: {\n    type: ParameterType.FUNCTION,\n    pretty_name: \"On finish\",\n    default: function () {\n      return;\n    },\n  },\n  /**\n   * Function to execute after the trial has loaded\n   */\n  on_load: {\n    type: ParameterType.FUNCTION,\n    pretty_name: \"On load\",\n    default: function () {\n      return;\n    },\n  },\n  /**\n   * Length of gap between the end of this trial and the start of the next trial\n   */\n  post_trial_gap: {\n    type: ParameterType.INT,\n    pretty_name: \"Post trial gap\",\n    default: 0,\n  },\n  /**\n   * A list of CSS classes to add to the jsPsych display element for the duration of this trial\n   */\n  css_classes: {\n    type: ParameterType.STRING,\n    pretty_name: \"Custom CSS classes\",\n    default: \"\",\n  },\n  /**\n   * Options to control simulation mode for the trial.\n   */\n  simulation_options: {\n    type: ParameterType.COMPLEX,\n    default: {},\n  },\n};\n\nexport type UniversalPluginParameters = InferredParameters<typeof universalPluginParameters>;\n\nexport interface PluginInfo {\n  name: string;\n  version?: string;\n  parameters: ParameterInfos;\n  data?: ParameterInfos;\n}\n\nexport interface JsPsychPlugin<I extends PluginInfo> {\n  trial(\n    display_element: HTMLElement,\n    trial: TrialType<I>,\n    on_load?: () => void\n  ): void | Promise<TrialResult | void>;\n\n  simulate?(\n    trial: TrialType<I>,\n    simulation_mode: SimulationMode,\n    simulation_options: SimulationOptions,\n    on_load?: () => void\n  ): void | Promise<TrialResult | void>;\n}\n\nexport type TrialType<I extends PluginInfo> = InferredParameters<I[\"parameters\"]> &\n  TrialDescription;\n\nexport type PluginParameters<I extends PluginInfo> = InferredParameters<I[\"parameters\"]>;\n","export interface AudioPlayerOptions {\n  useWebAudio: boolean;\n  audioContext?: AudioContext;\n}\n\nexport interface AudioPlayerInterface {\n  load(): Promise<void>;\n  play(): void;\n  stop(): void;\n  addEventListener(eventName: string, callback: EventListenerOrEventListenerObject): void;\n  removeEventListener(eventName: string, callback: EventListenerOrEventListenerObject): void;\n}\n\nexport class AudioPlayer implements AudioPlayerInterface {\n  private audio: HTMLAudioElement | AudioBufferSourceNode;\n  private webAudioBuffer: AudioBuffer;\n  private audioContext: AudioContext | null;\n  private useWebAudio: boolean;\n  private src: string;\n\n  constructor(src: string, options: AudioPlayerOptions = { useWebAudio: false }) {\n    this.src = src;\n    this.useWebAudio = options.useWebAudio;\n    this.audioContext = options.audioContext || null;\n  }\n\n  async load() {\n    if (this.useWebAudio) {\n      this.webAudioBuffer = await this.preloadWebAudio(this.src);\n    } else {\n      this.audio = await this.preloadHTMLAudio(this.src);\n    }\n  }\n\n  play() {\n    if (this.audio instanceof HTMLAudioElement) {\n      this.audio.play();\n    } else {\n      // If audio is not HTMLAudioElement, it must be a WebAudio API object, so create a source node.\n      if (!this.audio) this.audio = this.getAudioSourceNode(this.webAudioBuffer);\n      this.audio.start();\n    }\n  }\n\n  stop() {\n    if (this.audio instanceof HTMLAudioElement) {\n      this.audio.pause();\n      this.audio.currentTime = 0;\n    } else {\n      this.audio!.stop();\n      // Regenerate source node for audio since the previous one is stopped and unusable.\n      this.audio = this.getAudioSourceNode(this.webAudioBuffer);\n    }\n  }\n\n  addEventListener(eventName: string, callback: EventListenerOrEventListenerObject) {\n    // If WebAudio buffer exists but source node doesn't, create it.\n    if (!this.audio && this.webAudioBuffer)\n      this.audio = this.getAudioSourceNode(this.webAudioBuffer);\n    this.audio.addEventListener(eventName, callback);\n  }\n\n  removeEventListener(eventName: string, callback: EventListenerOrEventListenerObject) {\n    // If WebAudio buffer exists but source node doesn't, create it.\n    if (!this.audio && this.webAudioBuffer)\n      this.audio = this.getAudioSourceNode(this.webAudioBuffer);\n    this.audio.removeEventListener(eventName, callback);\n  }\n\n  private getAudioSourceNode(audioBuffer: AudioBuffer): AudioBufferSourceNode {\n    const source = this.audioContext!.createBufferSource();\n    source.buffer = audioBuffer;\n    source.connect(this.audioContext!.destination);\n    return source;\n  }\n\n  private async preloadWebAudio(src: string): Promise<AudioBuffer> {\n    const buffer = await fetch(src);\n    const arrayBuffer = await buffer.arrayBuffer();\n    const audioBuffer = await this.audioContext!.decodeAudioData(arrayBuffer);\n    const source = this.audioContext!.createBufferSource();\n    source.buffer = audioBuffer;\n    source.connect(this.audioContext!.destination);\n    return audioBuffer;\n  }\n\n  private async preloadHTMLAudio(src: string): Promise<HTMLAudioElement> {\n    return new Promise<HTMLAudioElement>((resolve, reject) => {\n      const audio = new Audio(src);\n      audio.addEventListener(\"canplaythrough\", () => {\n        resolve(audio);\n      });\n      audio.addEventListener(\"error\", (err) => {\n        reject(err);\n      });\n      audio.addEventListener(\"abort\", (err) => {\n        reject(err);\n      });\n    });\n  }\n}\n","import { ParameterType } from \"../../modules/plugins\";\nimport { unique } from \"../utils\";\nimport { AudioPlayer } from \"./AudioPlayer\";\n\nconst preloadParameterTypes = <const>[\n  ParameterType.AUDIO,\n  ParameterType.IMAGE,\n  ParameterType.VIDEO,\n];\ntype PreloadType = typeof preloadParameterTypes[number];\n\nexport class MediaAPI {\n  constructor(public useWebaudio: boolean) {\n    if (\n      this.useWebaudio &&\n      typeof window !== \"undefined\" &&\n      typeof window.AudioContext !== \"undefined\"\n    ) {\n      this.context = new AudioContext();\n    }\n  }\n\n  // video //\n  private video_buffers = {};\n  getVideoBuffer(videoID: string) {\n    if (videoID.startsWith(\"blob:\")) {\n      this.video_buffers[videoID] = videoID;\n    }\n    return this.video_buffers[videoID];\n  }\n\n  // audio //\n  private context: AudioContext = null;\n  private audio_buffers = [];\n\n  audioContext(): AudioContext {\n    if (this.context && this.context.state !== \"running\") {\n      this.context.resume();\n    }\n    return this.context;\n  }\n\n  async getAudioPlayer(audioID: string): Promise<AudioPlayer> {\n    if (this.audio_buffers[audioID] instanceof AudioPlayer) {\n      return this.audio_buffers[audioID];\n    } else {\n      this.audio_buffers[audioID] = new AudioPlayer(audioID, {\n        useWebAudio: this.useWebaudio,\n        audioContext: this.context,\n      });\n      await this.audio_buffers[audioID].load();\n      return this.audio_buffers[audioID];\n    }\n  }\n\n  // preloading stimuli //\n  private preload_requests = [];\n\n  private img_cache = {};\n\n  preloadAudio(\n    files,\n    callback_complete = () => {},\n    callback_load = (filepath: string) => {},\n    callback_error = (error) => {}\n  ) {\n    files = unique(files.flat());\n\n    let n_loaded = 0;\n\n    if (files.length == 0) {\n      callback_complete();\n      return;\n    }\n\n    for (const file of files) {\n      // check if file was already loaded\n      if (this.audio_buffers[file] instanceof AudioPlayer) {\n        n_loaded++;\n        callback_load(file);\n        if (n_loaded == files.length) {\n          callback_complete();\n        }\n      } else {\n        this.audio_buffers[file] = new AudioPlayer(file, {\n          useWebAudio: this.useWebaudio,\n          audioContext: this.context,\n        });\n        this.audio_buffers[file]\n          .load()\n          .then(() => {\n            n_loaded++;\n            callback_load(file);\n            if (n_loaded == files.length) {\n              callback_complete();\n            }\n          })\n          .catch((e) => {\n            callback_error(e);\n          });\n      }\n    }\n  }\n\n  preloadImages(\n    images,\n    callback_complete = () => {},\n    callback_load = (filepath) => {},\n    callback_error = (error_msg) => {}\n  ) {\n    // flatten the images array\n    images = unique(images.flat());\n\n    var n_loaded = 0;\n\n    if (images.length === 0) {\n      callback_complete();\n      return;\n    }\n\n    for (let i = 0; i < images.length; i++) {\n      const img = new Image();\n      const src = images[i];\n      img.onload = () => {\n        n_loaded++;\n        callback_load(src);\n        if (n_loaded === images.length) {\n          callback_complete();\n        }\n      };\n\n      img.onerror = (e) => {\n        callback_error({ source: src, error: e });\n      };\n\n      img.src = src;\n\n      this.img_cache[src] = img;\n      this.preload_requests.push(img);\n    }\n  }\n\n  preloadVideo(\n    videos,\n    callback_complete = () => {},\n    callback_load = (filepath) => {},\n    callback_error = (error_msg) => {}\n  ) {\n    // flatten the video array\n    videos = unique(videos.flat());\n\n    let n_loaded = 0;\n\n    if (videos.length === 0) {\n      callback_complete();\n      return;\n    }\n\n    for (const video of videos) {\n      const video_buffers = this.video_buffers;\n\n      //based on option 4 here: http://dinbror.dk/blog/how-to-preload-entire-html5-video-before-play-solved/\n      const request = new XMLHttpRequest();\n      request.open(\"GET\", video, true);\n      request.responseType = \"blob\";\n      request.onload = () => {\n        if (request.status === 200 || request.status === 0) {\n          const videoBlob = request.response;\n          video_buffers[video] = URL.createObjectURL(videoBlob); // IE10+\n          n_loaded++;\n          callback_load(video);\n          if (n_loaded === videos.length) {\n            callback_complete();\n          }\n        }\n      };\n      request.onerror = (e) => {\n        let err: ProgressEvent | string = e;\n        if (request.status == 404) {\n          err = \"404\";\n        }\n        callback_error({ source: video, error: err });\n      };\n      request.onloadend = (e) => {\n        if (request.status == 404) {\n          callback_error({ source: video, error: \"404\" });\n        }\n      };\n      request.send();\n      this.preload_requests.push(request);\n    }\n  }\n\n  private preloadMap = new Map<string, Record<string, PreloadType>>();\n\n  getAutoPreloadList(timeline_description: any[]) {\n    /** Map each preload parameter type to a set of paths to be preloaded */\n    const preloadPaths = Object.fromEntries(\n      preloadParameterTypes.map((type) => [type, new Set<string>()])\n    );\n\n    const traverseTimeline = (node, inheritedTrialType?) => {\n      const isTimeline = typeof node.timeline !== \"undefined\";\n\n      if (isTimeline) {\n        for (const childNode of node.timeline) {\n          traverseTimeline(childNode, node.type ?? inheritedTrialType);\n        }\n      } else if ((node.type ?? inheritedTrialType)?.info) {\n        // node is a trial with type.info set\n\n        // Get the plugin name and parameters object from the info object\n        const { name: pluginName, parameters } = (node.type ?? inheritedTrialType).info;\n\n        // Extract parameters to be preloaded and their types from parameter info if this has not\n        // yet been done for `pluginName`\n        if (!this.preloadMap.has(pluginName)) {\n          this.preloadMap.set(\n            pluginName,\n            Object.fromEntries(\n              Object.entries<any>(parameters)\n                // Filter out parameter entries with media types and a non-false `preload` option\n                .filter(\n                  ([_name, { type, preload }]) =>\n                    preloadParameterTypes.includes(type) && (preload ?? true)\n                )\n                // Map each entry's value to its parameter type\n                .map(([name, { type }]) => [name, type])\n            )\n          );\n        }\n\n        // Add preload paths from this trial\n        for (const [parameterName, parameterType] of Object.entries(\n          this.preloadMap.get(pluginName)\n        )) {\n          const parameterValue = node[parameterName];\n          const elements = preloadPaths[parameterType];\n\n          if (typeof parameterValue === \"string\") {\n            elements.add(parameterValue);\n          } else if (Array.isArray(parameterValue)) {\n            for (const element of parameterValue.flat()) {\n              if (typeof element === \"string\") {\n                elements.add(element);\n              }\n            }\n          }\n        }\n      }\n    };\n\n    traverseTimeline({ timeline: timeline_description });\n\n    return {\n      images: [...preloadPaths[ParameterType.IMAGE]],\n      audio: [...preloadPaths[ParameterType.AUDIO]],\n      video: [...preloadPaths[ParameterType.VIDEO]],\n    };\n  }\n\n  cancelPreloads() {\n    for (const request of this.preload_requests) {\n      request.onload = () => {};\n      request.onerror = () => {};\n      request.oncanplaythrough = () => {};\n      request.onabort = () => {};\n    }\n    this.preload_requests = [];\n  }\n\n  private microphone_recorder: MediaRecorder = null;\n\n  initializeMicrophoneRecorder(stream: MediaStream) {\n    const recorder = new MediaRecorder(stream);\n    this.microphone_recorder = recorder;\n  }\n\n  getMicrophoneRecorder(): MediaRecorder {\n    return this.microphone_recorder;\n  }\n\n  private camera_stream: MediaStream = null;\n  private camera_recorder: MediaRecorder = null;\n\n  initializeCameraRecorder(stream: MediaStream, opts?: MediaRecorderOptions) {\n    this.camera_stream = stream;\n    const recorder = new MediaRecorder(stream, opts);\n    this.camera_recorder = recorder;\n  }\n\n  getCameraStream(): MediaStream {\n    return this.camera_stream;\n  }\n\n  getCameraRecorder(): MediaRecorder {\n    return this.camera_recorder;\n  }\n}\n","export class SimulationAPI {\n  constructor(\n    private getDisplayContainerElement: () => HTMLElement,\n    private setJsPsychTimeout: (callback: () => void, delay: number) => number\n  ) {}\n\n  dispatchEvent(event: Event) {\n    this.getDisplayContainerElement().dispatchEvent(event);\n  }\n\n  /**\n   * Dispatches a `keydown` event for the specified key\n   * @param key Character code (`.key` property) for the key to press.\n   */\n  keyDown(key: string) {\n    this.dispatchEvent(new KeyboardEvent(\"keydown\", { key }));\n  }\n\n  /**\n   * Dispatches a `keyup` event for the specified key\n   * @param key Character code (`.key` property) for the key to press.\n   */\n  keyUp(key: string) {\n    this.dispatchEvent(new KeyboardEvent(\"keyup\", { key }));\n  }\n\n  /**\n   * Dispatches a `keydown` and `keyup` event in sequence to simulate pressing a key.\n   * @param key Character code (`.key` property) for the key to press.\n   * @param delay Length of time to wait (ms) before executing action\n   */\n  pressKey(key: string, delay = 0) {\n    if (delay > 0) {\n      this.setJsPsychTimeout(() => {\n        this.keyDown(key);\n        this.keyUp(key);\n      }, delay);\n    } else {\n      this.keyDown(key);\n      this.keyUp(key);\n    }\n  }\n\n  /**\n   * Dispatches `mousedown`, `mouseup`, and `click` events on the target element\n   * @param target The element to click\n   * @param delay Length of time to wait (ms) before executing action\n   */\n  clickTarget(target: Element, delay = 0) {\n    if (delay > 0) {\n      this.setJsPsychTimeout(() => {\n        target.dispatchEvent(new MouseEvent(\"mousedown\", { bubbles: true }));\n        target.dispatchEvent(new MouseEvent(\"mouseup\", { bubbles: true }));\n        target.dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\n      }, delay);\n    } else {\n      target.dispatchEvent(new MouseEvent(\"mousedown\", { bubbles: true }));\n      target.dispatchEvent(new MouseEvent(\"mouseup\", { bubbles: true }));\n      target.dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\n    }\n  }\n\n  /**\n   * Sets the value of a target text input\n   * @param target A text input element to fill in\n   * @param text Text to input\n   * @param delay Length of time to wait (ms) before executing action\n   */\n  fillTextInput(target: HTMLInputElement, text: string, delay = 0) {\n    if (delay > 0) {\n      this.setJsPsychTimeout(() => {\n        target.value = text;\n      }, delay);\n    } else {\n      target.value = text;\n    }\n  }\n\n  /**\n   * Picks a valid key from `choices`, taking into account jsPsych-specific\n   * identifiers like \"NO_KEYS\" and \"ALL_KEYS\".\n   * @param choices Which keys are valid.\n   * @returns A key selected at random from the valid keys.\n   */\n  getValidKey(choices: \"NO_KEYS\" | \"ALL_KEYS\" | Array<string> | Array<Array<string>>) {\n    const possible_keys = [\n      \"a\",\n      \"b\",\n      \"c\",\n      \"d\",\n      \"e\",\n      \"f\",\n      \"g\",\n      \"h\",\n      \"i\",\n      \"j\",\n      \"k\",\n      \"l\",\n      \"m\",\n      \"n\",\n      \"o\",\n      \"p\",\n      \"q\",\n      \"r\",\n      \"s\",\n      \"t\",\n      \"u\",\n      \"v\",\n      \"w\",\n      \"x\",\n      \"y\",\n      \"z\",\n      \"0\",\n      \"1\",\n      \"2\",\n      \"3\",\n      \"4\",\n      \"5\",\n      \"6\",\n      \"7\",\n      \"8\",\n      \"9\",\n      \" \",\n    ];\n\n    let key;\n    if (choices == \"NO_KEYS\") {\n      key = null;\n    } else if (choices == \"ALL_KEYS\") {\n      key = possible_keys[Math.floor(Math.random() * possible_keys.length)];\n    } else {\n      const flat_choices = choices.flat();\n      key = flat_choices[Math.floor(Math.random() * flat_choices.length)];\n    }\n\n    return key;\n  }\n\n  mergeSimulationData(default_data, simulation_options) {\n    // override any data with data from simulation object\n    return {\n      ...default_data,\n      ...simulation_options?.data,\n    };\n  }\n\n  ensureSimulationDataConsistency(trial, data) {\n    // All RTs must be rounded\n    if (data.rt) {\n      data.rt = Math.round(data.rt);\n    }\n\n    // If a trial_duration and rt exist, make sure that the RT is not longer than the trial.\n    if (trial.trial_duration && data.rt && data.rt > trial.trial_duration) {\n      data.rt = null;\n      if (data.response) {\n        data.response = null;\n      }\n      if (data.correct) {\n        data.correct = false;\n      }\n    }\n\n    // If trial.choices is NO_KEYS make sure that response and RT are null\n    if (trial.choices && trial.choices == \"NO_KEYS\") {\n      if (data.rt) {\n        data.rt = null;\n      }\n      if (data.response) {\n        data.response = null;\n      }\n    }\n\n    // If response is not allowed before stimulus display complete, ensure RT\n    // is longer than display time.\n    if (trial.allow_response_before_complete) {\n      if (trial.sequence_reps && trial.frame_time) {\n        const min_time = trial.sequence_reps * trial.frame_time * trial.stimuli.length;\n        if (data.rt < min_time) {\n          data.rt = null;\n          data.response = null;\n        }\n      }\n    }\n  }\n}\n","/**\n * A class that provides a wrapper around the global setTimeout and clearTimeout functions.\n */\nexport class TimeoutAPI {\n  private timeout_handlers: number[] = [];\n\n  /**\n   * Calls a function after a specified delay, in milliseconds.\n   * @param callback The function to call after the delay.\n   * @param delay The number of milliseconds to wait before calling the function.\n   * @returns A handle that can be used to clear the timeout with clearTimeout.\n   */\n  setTimeout(callback: () => void, delay: number): number {\n    const handle = window.setTimeout(callback, delay);\n    this.timeout_handlers.push(handle);\n    return handle;\n  }\n\n  /**\n   * Clears all timeouts that have been created with setTimeout.\n   */\n  clearAllTimeouts(): void {\n    for (const handler of this.timeout_handlers) {\n      clearTimeout(handler);\n    }\n    this.timeout_handlers = [];\n  }\n}\n","import autoBind from \"auto-bind\";\n\nimport { JsPsych } from \"../../JsPsych\";\nimport { KeyboardListenerAPI } from \"./KeyboardListenerAPI\";\nimport { MediaAPI } from \"./MediaAPI\";\nimport { SimulationAPI } from \"./SimulationAPI\";\nimport { TimeoutAPI } from \"./TimeoutAPI\";\n\nexport function createJointPluginAPIObject(jsPsych: JsPsych) {\n  const settings = jsPsych.getInitSettings();\n  const keyboardListenerAPI = new KeyboardListenerAPI(\n    jsPsych.getDisplayContainerElement,\n    settings.case_sensitive_responses,\n    settings.minimum_valid_rt\n  );\n  const timeoutAPI = new TimeoutAPI();\n  const mediaAPI = new MediaAPI(settings.use_webaudio);\n  const simulationAPI = new SimulationAPI(\n    jsPsych.getDisplayContainerElement,\n    timeoutAPI.setTimeout.bind(timeoutAPI)\n  );\n  return Object.assign(\n    {},\n    ...[keyboardListenerAPI, timeoutAPI, mediaAPI, simulationAPI].map((object) => autoBind(object))\n  ) as KeyboardListenerAPI & TimeoutAPI & MediaAPI & SimulationAPI;\n}\n\nexport type PluginAPI = ReturnType<typeof createJointPluginAPIObject>;\n","import rw from \"random-words\";\nimport seedrandom from \"seedrandom/lib/alea\";\n\n/**\n * Uses the `seedrandom` package to replace Math.random() with a seedable PRNG.\n *\n * @param seed An optional seed. If none is given, a random seed will be generated.\n * @returns The seed value.\n */\nexport function setSeed(seed: string = Math.random().toString()) {\n  Math.random = seedrandom(seed);\n  return seed;\n}\n\nexport function repeat(array, repetitions, unpack = false) {\n  const arr_isArray = Array.isArray(array);\n  const rep_isArray = Array.isArray(repetitions);\n\n  // if array is not an array, then we just repeat the item\n  if (!arr_isArray) {\n    if (!rep_isArray) {\n      array = [array];\n      repetitions = [repetitions];\n    } else {\n      repetitions = [repetitions[0]];\n      console.log(\n        \"Unclear parameters given to randomization.repeat. Multiple set sizes specified, but only one item exists to sample. Proceeding using the first set size.\"\n      );\n    }\n  } else {\n    // if repetitions is not an array, but array is, then we\n    // repeat repetitions for each entry in array\n    if (!rep_isArray) {\n      let reps = [];\n      for (let i = 0; i < array.length; i++) {\n        reps.push(repetitions);\n      }\n      repetitions = reps;\n    } else {\n      if (array.length != repetitions.length) {\n        console.warn(\n          \"Unclear parameters given to randomization.repeat. Items and repetitions are unequal lengths. Behavior may not be as expected.\"\n        );\n        // throw warning if repetitions is too short, use first rep ONLY.\n        if (repetitions.length < array.length) {\n          let reps = [];\n          for (let i = 0; i < array.length; i++) {\n            reps.push(repetitions);\n          }\n          repetitions = reps;\n        } else {\n          // throw warning if too long, and then use the first N\n          repetitions = repetitions.slice(0, array.length);\n        }\n      }\n    }\n  }\n\n  // should be clear at this point to assume that array and repetitions are arrays with == length\n  let allsamples = [];\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < repetitions[i]; j++) {\n      if (array[i] == null || typeof array[i] != \"object\") {\n        allsamples.push(array[i]);\n      } else {\n        allsamples.push(Object.assign({}, array[i]));\n      }\n    }\n  }\n\n  let out: any = shuffle(allsamples);\n\n  if (unpack) {\n    out = unpackArray(out);\n  }\n\n  return out;\n}\n\nexport function shuffle(array: Array<any>) {\n  if (!Array.isArray(array)) {\n    console.error(\"Argument to shuffle() must be an array.\");\n  }\n\n  const copy_array = array.slice(0);\n  let m = copy_array.length,\n    t,\n    i;\n\n  // While there remain elements to shuffle…\n  while (m) {\n    // Pick a remaining element…\n    i = Math.floor(Math.random() * m--);\n\n    // And swap it with the current element.\n    t = copy_array[m];\n    copy_array[m] = copy_array[i];\n    copy_array[i] = t;\n  }\n\n  return copy_array;\n}\n\nexport function shuffleNoRepeats(arr: Array<any>, equalityTest: (a: any, b: any) => boolean) {\n  if (!Array.isArray(arr)) {\n    console.error(\"First argument to shuffleNoRepeats() must be an array.\");\n  }\n  if (typeof equalityTest !== \"undefined\" && typeof equalityTest !== \"function\") {\n    console.error(\"Second argument to shuffleNoRepeats() must be a function.\");\n  }\n  // define a default equalityTest\n  if (typeof equalityTest == \"undefined\") {\n    equalityTest = function (a, b) {\n      if (a === b) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n  }\n\n  const random_shuffle = shuffle(arr);\n\n  for (let i = 0; i < random_shuffle.length - 1; i++) {\n    if (equalityTest(random_shuffle[i], random_shuffle[i + 1])) {\n      // neighbors are equal, pick a new random neighbor to swap (not the first or last element, to avoid edge cases)\n      let random_pick = Math.floor(Math.random() * (random_shuffle.length - 2)) + 1;\n      // test to make sure the new neighbor isn't equal to the old one\n      while (\n        equalityTest(random_shuffle[i + 1], random_shuffle[random_pick]) ||\n        equalityTest(random_shuffle[i + 1], random_shuffle[random_pick + 1]) ||\n        equalityTest(random_shuffle[i + 1], random_shuffle[random_pick - 1]) ||\n        equalityTest(random_shuffle[i], random_shuffle[random_pick])\n      ) {\n        random_pick = Math.floor(Math.random() * (random_shuffle.length - 2)) + 1;\n      }\n      const new_neighbor = random_shuffle[random_pick];\n      random_shuffle[random_pick] = random_shuffle[i + 1];\n      random_shuffle[i + 1] = new_neighbor;\n    }\n  }\n\n  return random_shuffle;\n}\n\nexport function shuffleAlternateGroups(arr_groups, random_group_order = false) {\n  const n_groups = arr_groups.length;\n  if (n_groups == 1) {\n    console.warn(\n      \"shuffleAlternateGroups() was called with only one group. Defaulting to simple shuffle.\"\n    );\n    return shuffle(arr_groups[0]);\n  }\n\n  let group_order = [];\n  for (let i = 0; i < n_groups; i++) {\n    group_order.push(i);\n  }\n  if (random_group_order) {\n    group_order = shuffle(group_order);\n  }\n\n  const randomized_groups = [];\n  let min_length = null;\n  for (let i = 0; i < n_groups; i++) {\n    min_length =\n      min_length === null ? arr_groups[i].length : Math.min(min_length, arr_groups[i].length);\n    randomized_groups.push(shuffle(arr_groups[i]));\n  }\n\n  const out = [];\n  for (let i = 0; i < min_length; i++) {\n    for (let j = 0; j < group_order.length; j++) {\n      out.push(randomized_groups[group_order[j]][i]);\n    }\n  }\n\n  return out;\n}\n\nexport function sampleWithoutReplacement(arr, size) {\n  if (!Array.isArray(arr)) {\n    console.error(\"First argument to sampleWithoutReplacement() must be an array\");\n  }\n\n  if (size > arr.length) {\n    console.error(\"Cannot take a sample larger than the size of the set of items to sample.\");\n  }\n  return shuffle(arr).slice(0, size);\n}\n\nexport function sampleWithReplacement(arr, size, weights?) {\n  if (!Array.isArray(arr)) {\n    console.error(\"First argument to sampleWithReplacement() must be an array\");\n  }\n\n  const normalized_weights = [];\n  if (typeof weights !== \"undefined\") {\n    if (weights.length !== arr.length) {\n      console.error(\n        \"The length of the weights array must equal the length of the array \" +\n          \"to be sampled from.\"\n      );\n    }\n    let weight_sum = 0;\n    for (const weight of weights) {\n      weight_sum += weight;\n    }\n    for (const weight of weights) {\n      normalized_weights.push(weight / weight_sum);\n    }\n  } else {\n    for (let i = 0; i < arr.length; i++) {\n      normalized_weights.push(1 / arr.length);\n    }\n  }\n\n  const cumulative_weights = [normalized_weights[0]];\n  for (let i = 1; i < normalized_weights.length; i++) {\n    cumulative_weights.push(normalized_weights[i] + cumulative_weights[i - 1]);\n  }\n\n  const samp = [];\n  for (let i = 0; i < size; i++) {\n    const rnd = Math.random();\n    let index = 0;\n    while (rnd > cumulative_weights[index]) {\n      index++;\n    }\n    samp.push(arr[index]);\n  }\n  return samp;\n}\n\nexport function factorial(factors: Record<string, any>, repetitions = 1, unpack = false) {\n  let design = [{}];\n  for (const [factorName, factor] of Object.entries(factors)) {\n    const new_design = [];\n    for (const level of factor) {\n      for (const cell of design) {\n        new_design.push({ ...cell, [factorName]: level });\n      }\n    }\n    design = new_design;\n  }\n\n  return repeat(design, repetitions, unpack);\n}\n\nexport function randomID(length = 32) {\n  let result = \"\";\n  const chars = \"0123456789abcdefghjklmnopqrstuvwxyz\";\n  for (let i = 0; i < length; i++) {\n    result += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return result;\n}\n\n/**\n * Generate a random integer from `lower` to `upper`, inclusive of both end points.\n * @param lower The lowest value it is possible to generate\n * @param upper The highest value it is possible to generate\n * @returns A random integer\n */\nexport function randomInt(lower: number, upper: number) {\n  if (upper < lower) {\n    throw new Error(\"Upper boundary must be greater than or equal to lower boundary\");\n  }\n  return lower + Math.floor(Math.random() * (upper - lower + 1));\n}\n\n/**\n * Generates a random sample from a Bernoulli distribution.\n * @param p The probability of sampling 1.\n * @returns 0, with probability 1-p, or 1, with probability p.\n */\nexport function sampleBernoulli(p: number) {\n  return Math.random() <= p ? 1 : 0;\n}\n\nexport function sampleNormal(mean: number, standard_deviation: number) {\n  return randn_bm() * standard_deviation + mean;\n}\n\nexport function sampleExponential(rate: number) {\n  return -Math.log(Math.random()) / rate;\n}\n\nexport function sampleExGaussian(\n  mean: number,\n  standard_deviation: number,\n  rate: number,\n  positive = false\n) {\n  let s = sampleNormal(mean, standard_deviation) + sampleExponential(rate);\n  if (positive) {\n    while (s <= 0) {\n      s = sampleNormal(mean, standard_deviation) + sampleExponential(rate);\n    }\n  }\n  return s;\n}\n\n/**\n * Generate one or more random words.\n *\n * This is a wrapper function for the {@link https://www.npmjs.com/package/random-words `random-words` npm package}.\n *\n * @param opts An object with optional properties `min`, `max`, `exactly`,\n * `join`, `maxLength`, `wordsPerString`, `separator`, and `formatter`.\n *\n * @returns An array of words or a single string, depending on parameter choices.\n */\nexport function randomWords(opts) {\n  return rw(opts);\n}\n\n// Box-Muller transformation for a random sample from normal distribution with mean = 0, std = 1\n// https://stackoverflow.com/a/36481059/3726673\nfunction randn_bm() {\n  var u = 0,\n    v = 0;\n  while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)\n  while (v === 0) v = Math.random();\n  return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n}\n\nfunction unpackArray(array) {\n  const out = {};\n\n  for (const x of array) {\n    for (const key of Object.keys(x)) {\n      if (typeof out[key] === \"undefined\") {\n        out[key] = [];\n      }\n      out[key].push(x[key]);\n    }\n  }\n\n  return out;\n}\n","interface turkInformation {\n  /**\n   * Is the experiment being loaded in preview mode on Mechanical Turk?\n   */\n  previewMode: boolean;\n  /**\n   * Is the experiment being loaded outside of the Mechanical Turk environment?\n   */\n  outsideTurk: boolean;\n  /**\n   * The HIT ID.\n   */\n  hitId: string;\n  /**\n   * The Assignment ID.\n   */\n  assignmentId: string;\n  /**\n   * The worker ID.\n   */\n  workerId: string;\n  /**\n   * URL for submission of the HIT.\n   */\n  turkSubmitTo: string;\n}\n\n/**\n * Gets information about the Mechanical Turk Environment, HIT, Assignment, and Worker\n * by parsing the URL variables that Mechanical Turk generates.\n * @returns An object containing information about the Mechanical Turk Environment, HIT, Assignment, and Worker.\n */\nexport function turkInfo(): turkInformation {\n  const turk: turkInformation = {\n    previewMode: false,\n    outsideTurk: false,\n    hitId: \"INVALID_URL_PARAMETER\",\n    assignmentId: \"INVALID_URL_PARAMETER\",\n    workerId: \"INVALID_URL_PARAMETER\",\n    turkSubmitTo: \"INVALID_URL_PARAMETER\",\n  };\n\n  const param = function (url, name) {\n    name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n    const regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\";\n    const regex = new RegExp(regexS);\n    const results = regex.exec(url);\n    return results == null ? \"\" : results[1];\n  };\n\n  const src = param(window.location.href, \"assignmentId\")\n    ? window.location.href\n    : document.referrer;\n\n  const keys = [\"assignmentId\", \"hitId\", \"workerId\", \"turkSubmitTo\"];\n  keys.map(function (key) {\n    turk[key] = unescape(param(src, key));\n  });\n\n  turk.previewMode = turk.assignmentId == \"ASSIGNMENT_ID_NOT_AVAILABLE\";\n\n  turk.outsideTurk =\n    !turk.previewMode && turk.hitId === \"\" && turk.assignmentId == \"\" && turk.workerId == \"\";\n\n  return turk;\n}\n\n/**\n * Send data to Mechnical Turk for storage.\n * @param data An object containing `key:value` pairs to send to Mechanical Turk. Values\n * cannot contain nested objects, arrays, or functions.\n * @returns Nothing\n */\nexport function submitToTurk(data) {\n  const turk = turkInfo();\n  const assignmentId = turk.assignmentId;\n  const turkSubmitTo = turk.turkSubmitTo;\n\n  if (!assignmentId || !turkSubmitTo) return;\n\n  const form = document.createElement(\"form\");\n  form.method = \"POST\";\n  form.action = turkSubmitTo + \"/mturk/externalSubmit?assignmentId=\" + assignmentId;\n\n  for (const key in data) {\n    if (data.hasOwnProperty(key)) {\n      const hiddenField = document.createElement(\"input\");\n      hiddenField.type = \"hidden\";\n      hiddenField.name = key;\n      hiddenField.id = key;\n      hiddenField.value = data[key];\n\n      form.appendChild(hiddenField);\n    }\n  }\n\n  document.body.appendChild(form);\n  form.submit();\n}\n","/**\n * Maintains a visual progress bar using HTML and CSS\n */\nexport class ProgressBar {\n  constructor(\n    private readonly containerElement: HTMLDivElement,\n    private readonly message: string | ((progress: number) => string)\n  ) {\n    this.setupElements();\n  }\n\n  private _progress = 0;\n\n  private innerDiv: HTMLDivElement;\n  private messageSpan: HTMLSpanElement;\n\n  /** Adds the progress bar HTML code into `this.containerElement` */\n  private setupElements() {\n    this.messageSpan = document.createElement(\"span\");\n\n    this.innerDiv = document.createElement(\"div\");\n    this.innerDiv.id = \"jspsych-progressbar-inner\";\n    this.update();\n\n    const outerDiv = document.createElement(\"div\");\n    outerDiv.id = \"jspsych-progressbar-outer\";\n    outerDiv.appendChild(this.innerDiv);\n\n    this.containerElement.appendChild(this.messageSpan);\n    this.containerElement.appendChild(outerDiv);\n  }\n\n  /** Updates the progress bar according to `this.progress` */\n  private update() {\n    this.innerDiv.style.width = this._progress * 100 + \"%\";\n\n    if (typeof this.message === \"function\") {\n      this.messageSpan.innerHTML = this.message(this._progress);\n    } else {\n      this.messageSpan.innerHTML = this.message;\n    }\n  }\n\n  /**\n   * The bar's current position as a number in the closed interval [0, 1]. Set this to update the\n   * progress bar accordingly.\n   */\n  set progress(progress: number) {\n    if (typeof progress !== \"number\" || progress < 0 || progress > 1) {\n      throw new Error(\"jsPsych.progressBar.progress must be a number between 0 and 1\");\n    }\n\n    this._progress = progress;\n    this.update();\n  }\n\n  get progress() {\n    return this._progress;\n  }\n}\n","import { Class } from \"type-fest\";\n\nimport { JsPsychExtension } from \"../modules/extensions\";\nimport { JsPsychPlugin, PluginInfo } from \"../modules/plugins\";\nimport { Trial } from \"./Trial\";\nimport { PromiseWrapper } from \"./util\";\n\nexport class TimelineVariable {\n  constructor(public readonly name: string) {}\n}\n\nexport type Parameter<T> = T | (() => T) | TimelineVariable;\n\nexport type TrialExtensionsConfiguration = Array<{\n  type: Class<JsPsychExtension>;\n  params?: Record<string, any>;\n}>;\n\nexport type SimulationMode = \"visual\" | \"data-only\";\n\nexport type SimulationOptions = {\n  data?: Record<string, any>;\n  mode?: SimulationMode;\n  simulate?: boolean;\n};\n\nexport type SimulationOptionsParameter = Parameter<{\n  data?: Parameter<Record<string, Parameter<any>>>;\n  mode?: Parameter<SimulationMode>;\n  simulate?: Parameter<boolean>;\n}>;\n\nexport interface TrialDescription extends Record<string, any> {\n  type: Parameter<Class<JsPsychPlugin<any>>>;\n\n  /** https://www.jspsych.org/latest/overview/plugins/#the-post_trial_gap-iti-parameter */\n  post_trial_gap?: Parameter<number>;\n\n  /** https://www.jspsych.org/latest/overview/plugins/#the-save_trial_parameters-parameter */\n  save_trial_parameters?: Parameter<Record<string, boolean>>;\n\n  /**\n   * Whether to include the values of timeline variables under a `timeline_variables` key. Can be\n   * `true` to save the values of all timeline variables, or an array of timeline variable names to\n   * only save specific timeline variables. Defaults to `false`.\n   */\n  save_timeline_variables?: Parameter<boolean | string[]>;\n\n  /** https://www.jspsych.org/latest/overview/style/#using-the-css_classes-trial-parameter */\n  css_classes?: Parameter<string | string[]>;\n\n  /** https://www.jspsych.org/latest/overview/simulation/#controlling-simulation-mode-with-simulation_options */\n  simulation_options?: SimulationOptionsParameter | string;\n\n  /** https://www.jspsych.org/latest/overview/extensions/ */\n  extensions?: Parameter<TrialExtensionsConfiguration>;\n\n  /**\n   * Whether to record the data of this trial. Defaults to `true`.\n   */\n  record_data?: Parameter<boolean>;\n\n  // Events\n\n  /** https://www.jspsych.org/latest/overview/events/#on_start-trial */\n  on_start?: (trial: any) => void;\n\n  /** https://www.jspsych.org/latest/overview/events/#on_load */\n  on_load?: () => void;\n\n  /** https://www.jspsych.org/latest/overview/events/#on_finish-trial */\n  on_finish?: (data: any) => void;\n}\n\n/** https://www.jspsych.org/latest/overview/timeline/#sampling-methods */\nexport type SampleOptions =\n  | { type: \"with-replacement\"; size: number; weights?: number[] }\n  | { type: \"without-replacement\"; size: number }\n  | { type: \"fixed-repetitions\"; size: number }\n  | { type: \"alternate-groups\"; groups: number[][]; randomize_group_order?: boolean }\n  | { type: \"custom\"; fn: (ids: number[]) => number[] };\n\nexport type TimelineArray = Array<TimelineDescription | TrialDescription | TimelineArray>;\n\nexport interface TimelineDescription extends Record<string, any> {\n  timeline: TimelineArray;\n  timeline_variables?: Record<string, any>[];\n\n  name?: string;\n\n  // Control flow\n\n  /** https://www.jspsych.org/latest/overview/timeline/#repeating-a-set-of-trials */\n  repetitions?: number;\n\n  /** https://www.jspsych.org/latest/overview/timeline/#looping-timelines */\n  loop_function?: (data: any) => boolean;\n\n  /** https://www.jspsych.org/latest/overview/timeline/#conditional-timelines */\n  conditional_function?: () => boolean;\n\n  // Randomization\n\n  /** https://www.jspsych.org/latest/overview/timeline/#random-orders-of-trials */\n  randomize_order?: boolean;\n\n  /** https://www.jspsych.org/latest/overview/timeline/#sampling-methods */\n  sample?: SampleOptions;\n\n  // Events\n\n  /** https://www.jspsych.org/latest/overview/events/#on_timeline_start */\n  on_timeline_start?: () => void;\n\n  /** https://www.jspsych.org/latest/overview/events/#on_timeline_finish */\n  on_timeline_finish?: () => void;\n}\n\nexport const timelineDescriptionKeys = [\n  \"timeline\",\n  \"timeline_variables\",\n  \"name\",\n  \"repetitions\",\n  \"loop_function\",\n  \"conditional_function\",\n  \"randomize_order\",\n  \"sample\",\n  \"on_timeline_start\",\n  \"on_timeline_finish\",\n];\n\nexport function isTrialDescription(\n  description: TrialDescription | TimelineDescription\n): description is TrialDescription {\n  return !isTimelineDescription(description);\n}\n\nexport function isTimelineDescription(\n  description: TrialDescription | TimelineDescription | TimelineArray\n): description is TimelineDescription | TimelineArray {\n  return Boolean((description as TimelineDescription).timeline) || Array.isArray(description);\n}\n\nexport enum TimelineNodeStatus {\n  PENDING,\n  RUNNING,\n  PAUSED,\n  COMPLETED,\n  ABORTED,\n}\n\n/**\n * Functions and options needed by `TimelineNode`s, provided by the `JsPsych` instance. This\n * approach allows to keep the public `JsPsych` API slim and decouples the `JsPsych` and timeline\n * node classes, simplifying unit testing.\n */\nexport interface TimelineNodeDependencies {\n  /**\n   * Called at the start of a trial, prior to invoking the plugin's trial method.\n   */\n  onTrialStart: (trial: Trial) => void;\n\n  /**\n   * Called when a trial's result data is available, before invoking `onTrialFinished()`.\n   */\n  onTrialResultAvailable: (trial: Trial) => void;\n\n  /**\n   * Called after a trial has finished.\n   */\n  onTrialFinished: (trial: Trial) => void;\n\n  /**\n   * Invoke `on_start` extension callbacks according to `extensionsConfiguration`\n   */\n  runOnStartExtensionCallbacks(extensionsConfiguration: TrialExtensionsConfiguration): void;\n\n  /**\n   * Invoke `on_load` extension callbacks according to `extensionsConfiguration`\n   */\n  runOnLoadExtensionCallbacks(extensionsConfiguration: TrialExtensionsConfiguration): void;\n\n  /**\n   * Invoke `on_finish` extension callbacks according to `extensionsConfiguration` and return a\n   * joint extensions result object\n   */\n  runOnFinishExtensionCallbacks(\n    extensionsConfiguration: TrialExtensionsConfiguration\n  ): Promise<Record<string, any>>;\n\n  /**\n   * Returns the simulation mode or `undefined`, if the experiment is not running in simulation\n   * mode.\n   */\n  getSimulationMode(): SimulationMode | undefined;\n\n  /**\n   * Returns the global simulation options as passed to `jsPsych.simulate()`\n   */\n  getGlobalSimulationOptions(): Record<string, SimulationOptionsParameter>;\n\n  /**\n   * Given a plugin class, create a new instance of it and return it.\n   */\n  instantiatePlugin: <Info extends PluginInfo>(\n    pluginClass: Class<JsPsychPlugin<Info>>\n  ) => JsPsychPlugin<Info>;\n\n  /**\n   * Return JsPsych's display element so it can be provided to plugins\n   */\n  getDisplayElement: () => HTMLElement;\n\n  /**\n   * Return the default inter-trial interval as provided to `initJsPsych()`\n   */\n  getDefaultIti: () => number;\n\n  /**\n   * A `PromiseWrapper` whose promise is resolved with result data whenever `jsPsych.finishTrial()`\n   * is called.\n   */\n  finishTrialPromise: PromiseWrapper<TrialResult | void>;\n\n  /**\n   * Clear all of the timeouts\n   */\n  clearAllTimeouts: () => void;\n}\n\nexport type TrialResult = Record<string, any>;\nexport type TrialResults = Array<Record<string, any>>;\n","/**\n * Maintains a promise and offers a function to resolve it. Whenever the promise is resolved, it is\n * replaced with a new one.\n */\nexport class PromiseWrapper<ResolveType = void> {\n  constructor() {\n    this.reset();\n  }\n\n  private promise: Promise<ResolveType>;\n  private resolvePromise: (resolveValue: ResolveType) => void;\n\n  reset() {\n    this.promise = new Promise((resolve) => {\n      this.resolvePromise = resolve;\n    });\n  }\n  get() {\n    return this.promise;\n  }\n  resolve(value: ResolveType) {\n    this.resolvePromise(value);\n    this.reset();\n  }\n}\n\nexport function isPromise(value: any): value is Promise<any> {\n  return value && typeof value[\"then\"] === \"function\";\n}\n\nexport function delay(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * Returns the string representation of a `path` array like accepted by lodash's `get` and `set`\n * functions.\n */\nexport function parameterPathArrayToString([firstPathElement, ...remainingPathElements]: string[]) {\n  let pathString = firstPathElement ?? \"\";\n\n  for (const pathElement of remainingPathElements) {\n    pathString += Number.isNaN(Number.parseInt(pathElement))\n      ? `.${pathElement}`\n      : `[${pathElement}]`;\n  }\n\n  return pathString;\n}\n\nfunction isObjectOrArray(value: any): value is Record<string, any> | any[] {\n  return typeof value === \"object\" && value !== null;\n}\n\ntype LookupResult = { doesPathExist: boolean; value?: any };\n\n/**\n * Initialized with an object, provides a `lookup` method to look up nested object and array paths\n * and a `set` method to override the element that `lookup` uses at a given path. The original\n * object remains unmodified. All looked up values are cached, including those at intermediate\n * paths. This means, `set`ting the element at a path only affects nested path lookups if the paths\n * have not been looked up and cached before.\n */\nexport class ParameterObjectPathCache {\n  private static lookupChild(\n    objectOrArray: Record<string, any> | any[],\n    childName: string\n  ): LookupResult {\n    let doesPathExist: boolean = false;\n    let childValue: any;\n\n    if (Number.isNaN(Number.parseInt(childName))) {\n      // `childName` refers to an object property\n      if (Object.hasOwn(objectOrArray, childName)) {\n        doesPathExist = true;\n        childValue = objectOrArray[childName];\n      }\n    } else {\n      // `childName` refers to an array index\n      if (Number.parseInt(childName) < objectOrArray.length) {\n        doesPathExist = true;\n        childValue = objectOrArray[childName];\n      }\n    }\n\n    return { doesPathExist, value: childValue };\n  }\n\n  private cache = new Map<string, any>();\n  private rootObject: any;\n\n  private get(path: string[]) {\n    return this.cache.get(path.join(\".\"));\n  }\n\n  private has(path: string[]) {\n    return this.cache.has(path.join(\".\"));\n  }\n\n  constructor() {}\n\n  public initialize(rootObject: any) {\n    this.rootObject = rootObject;\n    this.cache.set(\"\", rootObject);\n  }\n\n  public reset() {\n    this.cache.clear();\n    this.cache.set(\"\", this.rootObject);\n  }\n\n  public set(path: string[], value: any) {\n    this.cache.set(path.join(\".\"), value);\n  }\n\n  public lookup(path: string[]): LookupResult {\n    if (this.has(path)) {\n      return { doesPathExist: true, value: this.get(path) };\n    }\n\n    // Recursively find the closest ancestor path that has already been cached and start looking up\n    // the path from there, caching intermediate elements along the way\n    const lookupPath = (path: string[]): LookupResult => {\n      const parentPath = path.slice(0, -1);\n      const childName = path[path.length - 1];\n      if (!this.has(parentPath) && parentPath.length > 0) {\n        if (!lookupPath(parentPath).doesPathExist) {\n          return { doesPathExist: false };\n        }\n      }\n\n      const parentValue = this.get(parentPath);\n      if (!isObjectOrArray(parentValue)) {\n        return { doesPathExist: false };\n      }\n\n      const lookupResult = ParameterObjectPathCache.lookupChild(parentValue, childName);\n      if (lookupResult.doesPathExist) {\n        this.set(path, lookupResult.value);\n      }\n      return lookupResult;\n    };\n\n    return lookupPath(path);\n  }\n}\n","import type { Timeline } from \"./Timeline\";\nimport { ParameterObjectPathCache } from \"./util\";\nimport {\n  TimelineArray,\n  TimelineDescription,\n  TimelineNodeDependencies,\n  TimelineNodeStatus,\n  TimelineVariable,\n  TrialDescription,\n  TrialResult,\n} from \".\";\n\nexport type GetParameterValueOptions = {\n  /**\n   * If true, and the retrieved parameter value is a function, invoke the function and return its\n   * return value (defaults to `true`)\n   */\n  evaluateFunctions?: boolean;\n\n  /**\n   * Whether to fall back to parent timeline node parameters (defaults to `true`)\n   */\n  recursive?: boolean;\n\n  /**\n   * Whether the timeline node should cache the parameter lookup result for successive lookups,\n   * including those of nested properties or array elements (defaults to `true`)\n   */\n  cacheResult?: boolean;\n\n  /**\n   * A function that will be invoked with the original result of the parameter value lookup.\n   * Whatever it returns will subsequently be used instead of the original result. This allows to\n   * modify results before they are cached.\n   */\n  replaceResult?: (originalResult: any) => any;\n};\n\nexport abstract class TimelineNode {\n  public abstract readonly description: TimelineDescription | TrialDescription | TimelineArray;\n\n  /**\n   * The globally unique trial index of this node. It is set when the node is run. Timeline nodes\n   * have the same trial index as their first trial.\n   */\n  public index?: number;\n\n  public abstract readonly parent?: Timeline;\n\n  abstract run(): Promise<void>;\n\n  /**\n   * Returns a flat array of all currently available results of this node\n   */\n  abstract getResults(): TrialResult[];\n\n  /**\n   * Recursively evaluates the given timeline variable, starting at the current timeline node.\n   * Returns the result, or `undefined` if the variable is neither specified in the timeline\n   * description of this node, nor in the description of any parent node.\n   */\n  abstract evaluateTimelineVariable(variable: TimelineVariable): any;\n\n  /**\n   * Returns the most recent (child) TimelineNode. For trial nodes, this is always the trial node\n   * itself since trial nodes do not have child nodes. For timeline nodes, the return value is a\n   * Trial object most of the time, but it may also be a Timeline object when a timeline hasn't yet\n   * instantiated its children (e.g. during initial timeline callback functions).\n   */\n  abstract getLatestNode(): TimelineNode;\n\n  /**\n   * Returns an active child timeline (or itself) that matches the given name, or `undefined` if no such child exists.\n   */\n  abstract getActiveTimelineByName(name: string): Timeline | undefined;\n\n  protected status = TimelineNodeStatus.PENDING;\n\n  constructor(protected readonly dependencies: TimelineNodeDependencies) {}\n\n  getStatus() {\n    return this.status;\n  }\n\n  private parameterValueCache = new ParameterObjectPathCache();\n\n  /**\n   * Initializes the parameter value cache with `this.description`. To be called by subclass\n   * constructors after setting `this.description`.\n   */\n  protected initializeParameterValueCache() {\n    this.parameterValueCache.initialize(this.description);\n  }\n\n  /**\n   * Resets all cached parameter values in this timeline node and all of its parents. This is\n   * necessary to re-evaluate function parameters and timeline variables at each new trial.\n   */\n  protected resetParameterValueCache() {\n    this.parameterValueCache.reset();\n    this.parent?.resetParameterValueCache();\n  }\n\n  /**\n   * Retrieves a parameter value from the description of this timeline node, recursively falling\n   * back to the description of each parent timeline node unless `recursive` is set to `false`. If\n   * the parameter...\n   *\n   * * is a timeline variable, evaluates the variable and returns the result.\n   * * is not specified, returns `undefined`.\n   * * is a function and `evaluateFunctions` is not set to `false`, invokes the function and returns\n   *   its return value\n   * * has previously been looked up, return the cached result of the previous lookup\n   *\n   * @param parameterPath The path of the respective parameter in the timeline node description. If\n   * the path is an array, nested object properties or array items will be looked up.\n   * @param options See {@link GetParameterValueOptions}\n   */\n  public getParameterValue(\n    parameterPath: string | string[],\n    options: GetParameterValueOptions = {}\n  ): any {\n    const {\n      evaluateFunctions = true,\n      recursive = true,\n      cacheResult = true,\n      replaceResult,\n    } = options;\n\n    if (typeof parameterPath === \"string\") {\n      parameterPath = [parameterPath];\n    }\n\n    let { doesPathExist, value: result } = this.parameterValueCache.lookup(parameterPath);\n    if (!doesPathExist && recursive && this.parent) {\n      result = this.parent.getParameterValue(parameterPath, options);\n    }\n\n    if (typeof result === \"function\" && evaluateFunctions) {\n      result = result();\n    }\n    if (result instanceof TimelineVariable) {\n      result = this.evaluateTimelineVariable(result);\n    }\n\n    if (typeof replaceResult === \"function\") {\n      result = replaceResult(result);\n    }\n\n    if (cacheResult) {\n      this.parameterValueCache.set(parameterPath, result);\n    }\n\n    return result;\n  }\n\n  /**\n   * Retrieves and evaluates the `data` parameter. It is different from other parameters in that\n   * it's properties may be functions that have to be evaluated, and parent nodes' data parameter\n   * properties are merged into the result.\n   */\n  public getDataParameter(): Record<string, any> | undefined {\n    const data = this.getParameterValue(\"data\", { recursive: false });\n\n    return {\n      ...Object.fromEntries(\n        typeof data === \"object\"\n          ? Object.keys(data).map((key) => [key, this.getParameterValue([\"data\", key])])\n          : []\n      ),\n      ...this.parent?.getDataParameter(),\n    };\n  }\n}\n","import { Class } from \"type-fest\";\n\nimport { ParameterInfos } from \"../modules/plugins\";\nimport { JsPsychPlugin, ParameterType, PluginInfo } from \"../modules/plugins\";\nimport { deepCopy, deepMerge } from \"../modules/utils\";\nimport { Timeline } from \"./Timeline\";\nimport { GetParameterValueOptions, TimelineNode } from \"./TimelineNode\";\nimport { delay, isPromise, parameterPathArrayToString } from \"./util\";\nimport {\n  SimulationOptions,\n  TimelineNodeDependencies,\n  TimelineNodeStatus,\n  TimelineVariable,\n  TrialDescription,\n  TrialResult,\n  timelineDescriptionKeys,\n} from \".\";\n\nexport class Trial extends TimelineNode {\n  public readonly pluginClass: Class<JsPsychPlugin<any>>;\n  public pluginInstance: JsPsychPlugin<any>;\n  public trialObject?: TrialDescription;\n  public index?: number;\n\n  private result: TrialResult;\n  private readonly pluginInfo: PluginInfo;\n\n  constructor(\n    dependencies: TimelineNodeDependencies,\n    public readonly description: TrialDescription,\n    public readonly parent: Timeline\n  ) {\n    super(dependencies);\n    this.initializeParameterValueCache();\n\n    this.trialObject = deepCopy(description);\n    this.pluginClass = this.getParameterValue(\"type\", { evaluateFunctions: false });\n    this.pluginInfo = this.pluginClass[\"info\"];\n\n    if (!(\"version\" in this.pluginInfo) && !(\"data\" in this.pluginInfo)) {\n      console.warn(\n        this.pluginInfo[\"name\"],\n        \"is missing the 'version' and 'data' fields. Please update plugin as 'version' and 'data' will be required in v9. See https://www.jspsych.org/latest/developers/plugin-development/ for more details.\"\n      );\n    } else if (!(\"version\" in this.pluginInfo)) {\n      console.warn(\n        this.pluginInfo[\"name\"],\n        \"is missing the 'version' field. Please update plugin as 'version' will be required in v9. See https://www.jspsych.org/latest/developers/plugin-development/ for more details.\"\n      );\n    } else if (!(\"data\" in this.pluginInfo)) {\n      console.warn(\n        this.pluginInfo[\"name\"],\n        \"is missing the 'data' field. Please update plugin as 'data' will be required in v9. See https://www.jspsych.org/latest/developers/plugin-development/ for more details.\"\n      );\n    }\n  }\n\n  public async run() {\n    this.status = TimelineNodeStatus.RUNNING;\n    this.processParameters();\n\n    this.onStart();\n    this.addCssClasses();\n\n    this.pluginInstance = this.dependencies.instantiatePlugin(this.pluginClass);\n\n    this.result = this.processResult(await this.executeTrial());\n\n    this.dependencies.onTrialResultAvailable(this);\n\n    this.status = TimelineNodeStatus.COMPLETED;\n\n    await this.onFinish();\n    this.removeCssClasses();\n\n    const gap = this.getParameterValue(\"post_trial_gap\") ?? this.dependencies.getDefaultIti();\n    if (gap !== 0 && this.dependencies.getSimulationMode() !== \"data-only\") {\n      await delay(gap);\n    }\n\n    this.resetParameterValueCache();\n  }\n\n  private async executeTrial() {\n    const trialPromise = this.dependencies.finishTrialPromise.get();\n\n    /** Used as a way to figure out if `finishTrial()` has ben called without awaiting `trialPromise` */\n    let hasTrialPromiseBeenResolved = false;\n    trialPromise.then(() => {\n      hasTrialPromiseBeenResolved = true;\n    });\n\n    const { trialReturnValue, hasTrialBeenSimulated } = this.invokeTrialMethod();\n\n    // Wait until the trial has completed and grab result data\n    let result: TrialResult | void;\n    if (isPromise(trialReturnValue)) {\n      result = await Promise.race([trialReturnValue, trialPromise]);\n\n      // If `finishTrial()` was called, use the result provided to it. This may happen although\n      // `trialReturnValue` won the race (\"run-to-completion\").\n      if (hasTrialPromiseBeenResolved) {\n        result = await trialPromise;\n      }\n    } else {\n      // The `simulate` method always invokes `onLoad()`, so we don't call `onLoad()` when the trial\n      // has been simulated\n      if (!hasTrialBeenSimulated) {\n        this.onLoad();\n      }\n\n      result = await trialPromise;\n    }\n\n    // The trial has finished, time to clean up.\n    this.cleanupTrial();\n\n    return result;\n  }\n\n  private invokeTrialMethod(): {\n    trialReturnValue: void | Promise<void | TrialResult>;\n    hasTrialBeenSimulated: boolean;\n  } {\n    const globalSimulationMode = this.dependencies.getSimulationMode();\n\n    if (globalSimulationMode && typeof this.pluginInstance.simulate === \"function\") {\n      const simulationOptions = this.getSimulationOptions();\n\n      if (simulationOptions.simulate !== false) {\n        return {\n          hasTrialBeenSimulated: true,\n          trialReturnValue: this.pluginInstance.simulate(\n            this.trialObject,\n            simulationOptions.mode ?? globalSimulationMode,\n            simulationOptions,\n            this.onLoad\n          ),\n        };\n      }\n    }\n\n    return {\n      hasTrialBeenSimulated: false,\n      trialReturnValue: this.pluginInstance.trial(\n        this.dependencies.getDisplayElement(),\n        this.trialObject,\n        this.onLoad\n      ),\n    };\n  }\n\n  /**\n   * Cleanup the trial by removing the display element and removing event listeners\n   */\n  private cleanupTrial() {\n    this.dependencies.clearAllTimeouts();\n    this.dependencies.getDisplayElement().innerHTML = \"\";\n  }\n\n  /**\n   * Add the CSS classes from the `css_classes` parameter to the display element\n   */\n  private addCssClasses() {\n    const classes: string | string[] = this.getParameterValue(\"css_classes\");\n    const classList = this.dependencies.getDisplayElement().classList;\n    if (typeof classes === \"string\") {\n      classList.add(classes);\n    } else if (Array.isArray(classes)) {\n      classList.add(...classes);\n    }\n  }\n\n  /**\n   * Removes the provided css classes from the display element\n   */\n  private removeCssClasses() {\n    const classes = this.getParameterValue(\"css_classes\");\n    if (classes) {\n      this.dependencies\n        .getDisplayElement()\n        .classList.remove(...(typeof classes === \"string\" ? [classes] : classes));\n    }\n  }\n\n  private processResult(result: TrialResult | void) {\n    if (!result) {\n      result = {};\n    }\n\n    for (const [parameterName, shouldParameterBeIncluded] of Object.entries(\n      this.getParameterValue(\"save_trial_parameters\") ?? {}\n    )) {\n      if (this.pluginInfo.parameters[parameterName]) {\n        if (shouldParameterBeIncluded && !Object.hasOwn(result, parameterName)) {\n          let parameterValue = this.trialObject[parameterName];\n          if (typeof parameterValue === \"function\") {\n            parameterValue = parameterValue.toString();\n          }\n          result[parameterName] = parameterValue;\n        } else if (!shouldParameterBeIncluded && Object.hasOwn(result, parameterName)) {\n          delete result[parameterName];\n        }\n      } else {\n        console.warn(\n          `Non-existent parameter \"${parameterName}\" specified in save_trial_parameters.`\n        );\n      }\n    }\n\n    result = {\n      ...this.getDataParameter(),\n      ...result,\n      trial_type: this.pluginInfo.name,\n      trial_index: this.index,\n      plugin_version: this.pluginInfo[\"version\"] ? this.pluginInfo[\"version\"] : null,\n    };\n\n    // Add timeline variables to the result according to the `save_timeline_variables` parameter\n    const saveTimelineVariables = this.getParameterValue(\"save_timeline_variables\");\n    if (saveTimelineVariables === true) {\n      result.timeline_variables = { ...this.parent.getAllTimelineVariables() };\n    } else if (Array.isArray(saveTimelineVariables)) {\n      result.timeline_variables = Object.fromEntries(\n        Object.entries(this.parent.getAllTimelineVariables()).filter(([key, _]) =>\n          saveTimelineVariables.includes(key)\n        )\n      );\n    }\n\n    return result;\n  }\n\n  /**\n   * Runs a callback function retrieved from a parameter value and returns its result.\n   *\n   * @param parameterName The name of the parameter to retrieve the callback function from.\n   * @param callbackParameters The parameters (if any) to be passed to the callback function\n   */\n  private runParameterCallback(parameterName: string, ...callbackParameters: unknown[]) {\n    const callback = this.getParameterValue(parameterName, { evaluateFunctions: false });\n    if (callback) {\n      return callback(...callbackParameters);\n    }\n  }\n\n  private onStart() {\n    this.dependencies.onTrialStart(this);\n    this.runParameterCallback(\"on_start\", this.trialObject);\n    this.dependencies.runOnStartExtensionCallbacks(this.getParameterValue(\"extensions\"));\n  }\n\n  private onLoad = () => {\n    this.runParameterCallback(\"on_load\");\n    this.dependencies.runOnLoadExtensionCallbacks(this.getParameterValue(\"extensions\"));\n  };\n\n  private async onFinish() {\n    const extensionResults = await this.dependencies.runOnFinishExtensionCallbacks(\n      this.getParameterValue(\"extensions\")\n    );\n    Object.assign(this.result, extensionResults);\n\n    await Promise.resolve(this.runParameterCallback(\"on_finish\", this.getResult()));\n\n    this.dependencies.onTrialFinished(this);\n  }\n\n  public evaluateTimelineVariable(variable: TimelineVariable) {\n    // Timeline variable values are specified at the timeline level, not at the trial level, hence\n    // deferring to the parent timeline here\n    return this.parent?.evaluateTimelineVariable(variable);\n  }\n\n  public getParameterValue(\n    parameterPath: string | string[],\n    options: GetParameterValueOptions = {}\n  ) {\n    // Disable recursion for timeline description keys\n    if (\n      timelineDescriptionKeys.includes(\n        typeof parameterPath === \"string\" ? parameterPath : parameterPath[0]\n      )\n    ) {\n      options.recursive = false;\n    }\n    return super.getParameterValue(parameterPath, options);\n  }\n\n  /**\n   * Retrieves and evaluates the `simulation_options` parameter, considering nested properties and\n   * global simulation options.\n   */\n  public getSimulationOptions() {\n    const simulationOptions: SimulationOptions = this.getParameterValue(\"simulation_options\", {\n      replaceResult: (result = {}) => {\n        if (typeof result === \"string\") {\n          // Look up the global simulation options by their key\n          const globalSimulationOptions = this.dependencies.getGlobalSimulationOptions();\n          result = globalSimulationOptions[result] ?? globalSimulationOptions[\"default\"] ?? {};\n        }\n\n        return deepMerge(\n          deepCopy(this.dependencies.getGlobalSimulationOptions().default),\n          deepCopy(result)\n        );\n      },\n    });\n\n    if (typeof simulationOptions === \"undefined\") {\n      return {};\n    }\n\n    simulationOptions.mode = this.getParameterValue([\"simulation_options\", \"mode\"]);\n    simulationOptions.simulate = this.getParameterValue([\"simulation_options\", \"simulate\"]);\n    simulationOptions.data = this.getParameterValue([\"simulation_options\", \"data\"]);\n\n    if (typeof simulationOptions.data === \"object\") {\n      simulationOptions.data = Object.fromEntries(\n        Object.keys(simulationOptions.data).map((key) => [\n          key,\n          this.getParameterValue([\"simulation_options\", \"data\", key]),\n        ])\n      );\n    }\n\n    return simulationOptions;\n  }\n\n  /**\n   * Returns the result object of this trial or `undefined` if the result is not yet known or the\n   * `record_data` trial parameter is `false`.\n   */\n  public getResult() {\n    return this.getParameterValue(\"record_data\") === false ? undefined : this.result;\n  }\n\n  public getResults() {\n    const result = this.getResult();\n    return result ? [result] : [];\n  }\n\n  /**\n   * Checks that the parameters provided in the trial description align with the plugin's info\n   * object, resolves missing parameter values from the parent timeline, resolves timeline variable\n   * parameters, evaluates parameter functions if the expected parameter type is not `FUNCTION`, and\n   * sets default values for optional parameters.\n   */\n  private processParameters() {\n    const assignParameterValues = (\n      parameterObject: Record<string, any>,\n      parameterInfos: ParameterInfos,\n      parentParameterPath: string[] = []\n    ) => {\n      for (const [parameterName, parameterConfig] of Object.entries(parameterInfos)) {\n        const parameterPath = [...parentParameterPath, parameterName];\n\n        let parameterValue = this.getParameterValue(parameterPath, {\n          evaluateFunctions: parameterConfig.type !== ParameterType.FUNCTION,\n          replaceResult: (originalResult) => {\n            if (typeof originalResult === \"undefined\") {\n              if (typeof parameterConfig.default === \"undefined\") {\n                throw new Error(\n                  `You must specify a value for the \"${parameterPathArrayToString(\n                    parameterPath\n                  )}\" parameter in the \"${this.pluginInfo.name}\" plugin.`\n                );\n              } else {\n                return parameterConfig.default;\n              }\n            } else {\n              return originalResult;\n            }\n          },\n        });\n\n        if (parameterConfig.array && !Array.isArray(parameterValue)) {\n          const parameterPathString = parameterPathArrayToString(parameterPath);\n          throw new Error(\n            `A non-array value (\\`${parameterValue}\\`) was provided for the array parameter \"${parameterPathString}\" in the \"${this.pluginInfo.name}\" plugin. Please make sure that \"${parameterPathString}\" is an array.`\n          );\n        }\n\n        if (parameterConfig.type === ParameterType.COMPLEX && parameterConfig.nested) {\n          // Assign parameter values according to the `nested` schema\n          if (parameterConfig.array) {\n            // ...for each nested array element\n            parameterValue = parameterValue.map((_, arrayIndex) => {\n              const arrayElementPath = [...parameterPath, arrayIndex.toString()];\n              const arrayElementValue = this.getParameterValue(arrayElementPath);\n              assignParameterValues(arrayElementValue, parameterConfig.nested, arrayElementPath);\n              return arrayElementValue;\n            });\n          } else {\n            // ...for the nested object\n            assignParameterValues(parameterValue, parameterConfig.nested, parameterPath);\n          }\n        }\n\n        parameterObject[parameterName] = parameterValue;\n      }\n    };\n\n    const trialObject = deepCopy(this.description);\n    assignParameterValues(trialObject, this.pluginInfo.parameters);\n    this.trialObject = trialObject;\n  }\n\n  public getLatestNode() {\n    return this;\n  }\n\n  public getActiveTimelineByName(name: string): Timeline | undefined {\n    // This returns undefined because the function is looking\n    // for a timeline. If we get to this point, then none\n    // of the parent nodes match the name.\n    return undefined;\n  }\n}\n","import { DataCollection } from \"../modules/data/DataCollection\";\nimport {\n  repeat,\n  sampleWithReplacement,\n  sampleWithoutReplacement,\n  shuffle,\n  shuffleAlternateGroups,\n} from \"../modules/randomization\";\nimport { TimelineNode } from \"./TimelineNode\";\nimport { Trial } from \"./Trial\";\nimport { PromiseWrapper } from \"./util\";\nimport {\n  TimelineArray,\n  TimelineDescription,\n  TimelineNodeDependencies,\n  TimelineNodeStatus,\n  TimelineVariable,\n  TrialDescription,\n  TrialResult,\n  isTimelineDescription,\n  isTrialDescription,\n} from \".\";\n\nexport class Timeline extends TimelineNode {\n  public readonly children: TimelineNode[] = [];\n  public readonly description: TimelineDescription;\n\n  constructor(\n    dependencies: TimelineNodeDependencies,\n    description: TimelineDescription | TimelineArray,\n    public readonly parent?: Timeline\n  ) {\n    super(dependencies);\n    this.description = Array.isArray(description) ? { timeline: description } : description;\n    this.initializeParameterValueCache();\n  }\n\n  private currentChild?: TimelineNode;\n  private shouldAbort = false;\n\n  public async run() {\n    if (typeof this.index === \"undefined\") {\n      // We're the first timeline node to run. Otherwise, another node would have set our index\n      // right before running us.\n      this.index = 0;\n    }\n\n    this.status = TimelineNodeStatus.RUNNING;\n\n    const { conditional_function, loop_function, repetitions = 1 } = this.description;\n\n    // Generate initial timeline variable order so the first set of timeline variables is already\n    // available to the `on_timeline_start` and `conditional_function` callbacks\n    let timelineVariableOrder = this.generateTimelineVariableOrder();\n    this.setCurrentTimelineVariablesByIndex(timelineVariableOrder[0]);\n    let isInitialTimelineVariableOrder = true; // So we don't regenerate the order in the first iteration\n\n    let currentLoopIterationResults: TrialResult[];\n\n    if (!conditional_function || conditional_function()) {\n      this.onStart();\n\n      for (let repetition = 0; repetition < repetitions; repetition++) {\n        do {\n          currentLoopIterationResults = [];\n\n          // Generate a new timeline variable order in each iteration except for the first one where\n          // it has been done before\n          if (isInitialTimelineVariableOrder) {\n            isInitialTimelineVariableOrder = false;\n          } else {\n            timelineVariableOrder = this.generateTimelineVariableOrder();\n          }\n\n          for (const timelineVariableIndex of timelineVariableOrder) {\n            this.setCurrentTimelineVariablesByIndex(timelineVariableIndex);\n\n            for (const childNode of this.instantiateChildNodes()) {\n              const previousChild = this.currentChild;\n              this.currentChild = childNode;\n              childNode.index = previousChild\n                ? previousChild.getLatestNode().index + 1\n                : this.index;\n\n              await childNode.run();\n              // @ts-expect-error TS thinks `this.status` must be `RUNNING` now, but it might have\n              // changed while `await`ing\n              if (this.status === TimelineNodeStatus.PAUSED) {\n                await this.resumePromise.get();\n              }\n              if (this.shouldAbort) {\n                this.status = TimelineNodeStatus.ABORTED;\n                return;\n              }\n\n              currentLoopIterationResults.push(...this.currentChild.getResults());\n            }\n          }\n        } while (loop_function && loop_function(new DataCollection(currentLoopIterationResults)));\n      }\n\n      this.onFinish();\n    }\n\n    this.status = TimelineNodeStatus.COMPLETED;\n  }\n\n  private onStart() {\n    if (this.description.on_timeline_start) {\n      this.description.on_timeline_start();\n    }\n  }\n\n  private onFinish() {\n    if (this.description.on_timeline_finish) {\n      this.description.on_timeline_finish();\n    }\n  }\n\n  pause() {\n    if (this.currentChild instanceof Timeline) {\n      this.currentChild.pause();\n    }\n    this.status = TimelineNodeStatus.PAUSED;\n  }\n\n  private resumePromise = new PromiseWrapper();\n  resume() {\n    if (this.status == TimelineNodeStatus.PAUSED) {\n      if (this.currentChild instanceof Timeline) {\n        this.currentChild.resume();\n      }\n      this.status = TimelineNodeStatus.RUNNING;\n      this.resumePromise.resolve();\n    }\n  }\n\n  /**\n   * If the timeline is running or paused, aborts the timeline after the current trial has completed\n   */\n  abort() {\n    if (this.status === TimelineNodeStatus.RUNNING || this.status === TimelineNodeStatus.PAUSED) {\n      if (this.currentChild instanceof Timeline) {\n        this.currentChild.abort();\n      }\n\n      this.shouldAbort = true;\n      if (this.status === TimelineNodeStatus.PAUSED) {\n        this.resume();\n      }\n    }\n  }\n\n  private instantiateChildNodes() {\n    const newChildNodes = this.description.timeline.map((childDescription) => {\n      return isTimelineDescription(childDescription)\n        ? new Timeline(this.dependencies, childDescription, this)\n        : new Trial(this.dependencies, childDescription, this);\n    });\n    this.children.push(...newChildNodes);\n    return newChildNodes;\n  }\n\n  private currentTimelineVariables: Record<string, any>;\n  private setCurrentTimelineVariablesByIndex(index: number | null) {\n    this.currentTimelineVariables = {\n      ...this.parent?.getAllTimelineVariables(),\n      ...(index === null ? undefined : this.description.timeline_variables[index]),\n    };\n  }\n\n  /**\n   * If the timeline has timeline variables, returns the order of `timeline_variables` array indices\n   * to be used, according to the timeline's `sample` setting. If the timeline has no timeline\n   * variables, returns `[null]`.\n   */\n  private generateTimelineVariableOrder() {\n    const timelineVariableLength = this.description.timeline_variables?.length;\n    if (!timelineVariableLength) {\n      return [null];\n    }\n\n    let order = [...Array(timelineVariableLength).keys()];\n\n    const sample = this.description.sample;\n\n    if (sample) {\n      switch (sample.type) {\n        case \"custom\":\n          order = sample.fn(order);\n          break;\n\n        case \"with-replacement\":\n          order = sampleWithReplacement(order, sample.size, sample.weights);\n          break;\n\n        case \"without-replacement\":\n          order = sampleWithoutReplacement(order, sample.size);\n          break;\n\n        case \"fixed-repetitions\":\n          order = repeat(order, sample.size);\n          break;\n\n        case \"alternate-groups\":\n          order = shuffleAlternateGroups(sample.groups, sample.randomize_group_order);\n          break;\n\n        default:\n          throw new Error(\n            `Invalid type \"${\n              // @ts-expect-error TS doesn't have a type for `sample` in this case\n              sample.type\n            }\" in timeline sample parameters. Valid options for type are \"custom\", \"with-replacement\", \"without-replacement\", \"fixed-repetitions\", and \"alternate-groups\"`\n          );\n      }\n    }\n\n    if (this.description.randomize_order) {\n      order = shuffle(order);\n    }\n\n    return order;\n  }\n\n  /**\n   * Returns the current values of all timeline variables, including those from parent timelines\n   */\n  public getAllTimelineVariables() {\n    return this.currentTimelineVariables;\n  }\n\n  public evaluateTimelineVariable(variable: TimelineVariable) {\n    if (this.currentTimelineVariables?.hasOwnProperty(variable.name)) {\n      return this.currentTimelineVariables[variable.name];\n    }\n    throw new Error(`Timeline variable ${variable.name} not found.`);\n  }\n\n  public getResults() {\n    const results: TrialResult[] = [];\n    for (const child of this.children) {\n      if (child instanceof Trial) {\n        const childResult = child.getResult();\n        if (childResult) {\n          results.push(childResult);\n        }\n      } else if (child instanceof Timeline) {\n        results.push(...child.getResults());\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Returns the naive progress of the timeline (as a fraction), without considering conditional or\n   * loop functions.\n   */\n  public getNaiveProgress() {\n    if (this.status === TimelineNodeStatus.PENDING) {\n      return 0;\n    }\n\n    const activeNode = this.getLatestNode();\n    if (!activeNode) {\n      return 1;\n    }\n\n    let completedTrials = activeNode.index;\n    if (activeNode.getStatus() === TimelineNodeStatus.COMPLETED) {\n      completedTrials++;\n    }\n\n    return Math.min(completedTrials / this.getNaiveTrialCount(), 1);\n  }\n\n  /**\n   * Recursively computes the naive number of trials in the timeline, without considering\n   * conditional or loop functions.\n   */\n  public getNaiveTrialCount() {\n    // Since child timeline nodes are instantiated lazily, we cannot rely on them but instead have\n    // to recurse the description programmatically.\n\n    const getTrialCount = (description: TimelineArray | TimelineDescription | TrialDescription) => {\n      const getTimelineArrayTrialCount = (description: TimelineArray) =>\n        description\n          .map((childDescription) => getTrialCount(childDescription))\n          .reduce((a, b) => a + b);\n\n      if (Array.isArray(description)) {\n        return getTimelineArrayTrialCount(description);\n      }\n\n      if (isTrialDescription(description)) {\n        return 1;\n      }\n      if (isTimelineDescription(description)) {\n        let conditionCount = description.timeline_variables?.length || 1;\n\n        switch (description.sample?.type) {\n          case \"with-replacement\":\n          case \"without-replacement\":\n            conditionCount = description.sample.size;\n            break;\n\n          case \"fixed-repetitions\":\n            conditionCount *= description.sample.size;\n            break;\n\n          case \"alternate-groups\":\n            conditionCount = description.sample.groups\n              .map((group) => group.length)\n              .reduce((a, b) => a + b, 0);\n            break;\n        }\n\n        return (\n          getTimelineArrayTrialCount(description.timeline) *\n          (description.repetitions ?? 1) *\n          conditionCount\n        );\n      }\n      return 0;\n    };\n\n    return getTrialCount(this.description);\n  }\n\n  public getLatestNode() {\n    return this.currentChild?.getLatestNode() ?? this;\n  }\n\n  public getActiveTimelineByName(name: string) {\n    if (this.description.name === name) {\n      return this;\n    }\n\n    return this.currentChild?.getActiveTimelineByName(name);\n  }\n}\n","import autoBind from \"auto-bind\";\n\nimport { version } from \"../package.json\";\nimport { ExtensionManager, ExtensionManagerDependencies } from \"./ExtensionManager\";\nimport { JsPsychData, JsPsychDataDependencies } from \"./modules/data\";\nimport { PluginAPI, createJointPluginAPIObject } from \"./modules/plugin-api\";\nimport * as randomization from \"./modules/randomization\";\nimport * as turk from \"./modules/turk\";\nimport * as utils from \"./modules/utils\";\nimport { ProgressBar } from \"./ProgressBar\";\nimport {\n  SimulationMode,\n  SimulationOptionsParameter,\n  TimelineArray,\n  TimelineDescription,\n  TimelineNodeDependencies,\n  TimelineVariable,\n  TrialResult,\n} from \"./timeline\";\nimport { Timeline } from \"./timeline/Timeline\";\nimport { Trial } from \"./timeline/Trial\";\nimport { PromiseWrapper } from \"./timeline/util\";\n\nexport class JsPsych {\n  turk = turk;\n  randomization = randomization;\n  utils = utils;\n  data: JsPsychData;\n  pluginAPI: PluginAPI;\n\n  version() {\n    return version;\n  }\n\n  /** Options */\n  private options: any = {};\n\n  /** Experiment timeline */\n  private timeline?: Timeline;\n\n  /** Target DOM element */\n  private displayContainerElement: HTMLElement;\n  private displayElement: HTMLElement;\n\n  /** Time that the experiment began */\n  private experimentStartTime: Date;\n\n  /**\n   * Whether the page is retrieved directly via the `file://` protocol (true) or hosted on a web\n   * server (false)\n   */\n  private isFileProtocolUsed = false;\n\n  /** The simulation mode (if the experiment is being simulated) */\n  private simulationMode?: SimulationMode;\n\n  /** Simulation options passed in via `simulate()` */\n  private simulationOptions: Record<string, SimulationOptionsParameter>;\n\n  private extensionManager: ExtensionManager;\n\n  constructor(options?) {\n    // override default options if user specifies an option\n    options = {\n      display_element: undefined,\n      on_finish: () => {},\n      on_trial_start: () => {},\n      on_trial_finish: () => {},\n      on_data_update: () => {},\n      on_interaction_data_update: () => {},\n      on_close: () => {},\n      use_webaudio: true,\n      show_progress_bar: false,\n      message_progress_bar: \"Completion Progress\",\n      auto_update_progress_bar: true,\n      default_iti: 0,\n      minimum_valid_rt: 0,\n      experiment_width: null,\n      override_safe_mode: false,\n      case_sensitive_responses: false,\n      extensions: [],\n      ...options,\n    };\n    this.options = options;\n\n    autoBind(this); // so we can pass JsPsych methods as callbacks and `this` remains the JsPsych instance\n\n    // detect whether page is running in browser as a local file, and if so, disable web audio and\n    // video preloading to prevent CORS issues\n    if (\n      window.location.protocol == \"file:\" &&\n      (options.override_safe_mode === false || typeof options.override_safe_mode === \"undefined\")\n    ) {\n      options.use_webaudio = false;\n      this.isFileProtocolUsed = true;\n      console.warn(\n        \"jsPsych detected that it is running via the file:// protocol and not on a web server. \" +\n          \"To prevent issues with cross-origin requests, Web Audio and video preloading have been disabled. \" +\n          \"If you would like to override this setting, you can set 'override_safe_mode' to 'true' in initJsPsych. \" +\n          \"For more information, see: https://www.jspsych.org/overview/running-experiments\"\n      );\n    }\n\n    // initialize modules\n    this.data = new JsPsychData(this.dataDependencies);\n    this.pluginAPI = createJointPluginAPIObject(this);\n\n    this.extensionManager = new ExtensionManager(\n      this.extensionManagerDependencies,\n      options.extensions\n    );\n  }\n\n  private endMessage?: string;\n\n  /**\n   * Starts an experiment using the provided timeline and returns a promise that is resolved when\n   * the experiment is finished.\n   *\n   * @param timeline The timeline to be run\n   */\n  async run(timeline: TimelineDescription | TimelineArray) {\n    if (typeof timeline === \"undefined\") {\n      console.error(\"No timeline declared in jsPsych.run(). Cannot start experiment.\");\n    }\n\n    if (timeline.length === 0) {\n      console.error(\n        \"No trials have been added to the timeline (the timeline is an empty array). Cannot start experiment.\"\n      );\n    }\n\n    // create experiment timeline\n    this.timeline = new Timeline(this.timelineDependencies, timeline);\n\n    await this.prepareDom();\n    await this.extensionManager.initializeExtensions();\n\n    document.documentElement.setAttribute(\"jspsych\", \"present\");\n\n    this.experimentStartTime = new Date();\n\n    await this.timeline.run();\n    await Promise.resolve(this.options.on_finish(this.data.get()));\n\n    if (this.endMessage) {\n      this.getDisplayElement().innerHTML = this.endMessage;\n    }\n\n    this.data.removeInteractionListeners();\n  }\n\n  async simulate(\n    timeline: any[],\n    simulation_mode: \"data-only\" | \"visual\" = \"data-only\",\n    simulation_options = {}\n  ) {\n    this.simulationMode = simulation_mode;\n    this.simulationOptions = simulation_options;\n    await this.run(timeline);\n  }\n\n  public progressBar?: ProgressBar;\n\n  getProgress() {\n    return {\n      total_trials: this.timeline?.getNaiveTrialCount(),\n      current_trial_global: this.timeline?.getLatestNode().index ?? 0,\n      percent_complete: this.timeline?.getNaiveProgress() * 100,\n    };\n  }\n\n  getStartTime() {\n    return this.experimentStartTime; // TODO This seems inconsistent, given that `getTotalTime()` returns a number, not a `Date`\n  }\n\n  getTotalTime() {\n    if (!this.experimentStartTime) {\n      return 0;\n    }\n    return new Date().getTime() - this.experimentStartTime.getTime();\n  }\n\n  getDisplayElement() {\n    return this.displayElement;\n  }\n\n  getDisplayContainerElement() {\n    return this.displayContainerElement;\n  }\n\n  abortExperiment(endMessage?: string, data = {}) {\n    this.endMessage = endMessage;\n    this.timeline.abort();\n    this.pluginAPI.cancelAllKeyboardResponses();\n    this.pluginAPI.clearAllTimeouts();\n    this.finishTrial(data);\n  }\n\n  abortCurrentTimeline() {\n    let currentTimeline = this.timeline?.getLatestNode();\n    if (currentTimeline instanceof Trial) {\n      currentTimeline = currentTimeline.parent;\n    }\n    if (currentTimeline instanceof Timeline) {\n      currentTimeline.abort();\n    }\n  }\n\n  /**\n   * Aborts a named timeline. The timeline must be currently running in order to abort it.\n   *\n   * @param name The name of the timeline to abort. Timelines can be given names by setting the `name` parameter in the description of the timeline.\n   */\n  abortTimelineByName(name: string): void {\n    const timeline = this.timeline?.getActiveTimelineByName(name);\n    if (timeline) {\n      timeline.abort();\n    }\n  }\n\n  getCurrentTrial() {\n    const activeNode = this.timeline?.getLatestNode();\n    if (activeNode instanceof Trial) {\n      return activeNode.description;\n    }\n    return undefined;\n  }\n\n  getInitSettings() {\n    return this.options;\n  }\n\n  timelineVariable(variableName: string) {\n    return new TimelineVariable(variableName);\n  }\n\n  evaluateTimelineVariable(variableName: string) {\n    return this.timeline\n      ?.getLatestNode()\n      ?.evaluateTimelineVariable(new TimelineVariable(variableName));\n  }\n\n  pauseExperiment() {\n    this.timeline?.pause();\n  }\n\n  resumeExperiment() {\n    this.timeline?.resume();\n  }\n\n  getSafeModeStatus() {\n    return this.isFileProtocolUsed;\n  }\n\n  getTimeline() {\n    return this.timeline?.description.timeline;\n  }\n\n  get extensions() {\n    return this.extensionManager?.extensions ?? {};\n  }\n\n  private async prepareDom() {\n    // Wait until the document is ready\n    if (document.readyState !== \"complete\") {\n      await new Promise((resolve) => {\n        window.addEventListener(\"load\", resolve);\n      });\n    }\n\n    const options = this.options;\n\n    // set DOM element where jsPsych will render content\n    // if undefined, then jsPsych will use the <body> tag and the entire page\n    if (typeof options.display_element === \"undefined\") {\n      // check if there is a body element on the page\n      let body = document.body;\n      if (!body) {\n        body = document.createElement(\"body\");\n        document.documentElement.appendChild(body);\n      }\n      // using the full page, so we need the HTML element to have 100% height, and body to be full\n      // width and height with no margin\n      document.querySelector(\"html\").style.height = \"100%\";\n\n      body.style.margin = \"0px\";\n      body.style.height = \"100%\";\n      body.style.width = \"100%\";\n      options.display_element = body;\n    } else {\n      // make sure that the display element exists on the page\n      const display =\n        options.display_element instanceof Element\n          ? options.display_element\n          : document.querySelector(\"#\" + options.display_element);\n      if (display === null) {\n        console.error(\"The display_element specified in initJsPsych() does not exist in the DOM.\");\n      } else {\n        options.display_element = display;\n      }\n    }\n\n    const contentElement = document.createElement(\"div\");\n    contentElement.id = \"jspsych-content\";\n\n    const contentWrapperElement = document.createElement(\"div\");\n    contentWrapperElement.className = \"jspsych-content-wrapper\";\n    contentWrapperElement.appendChild(contentElement);\n\n    this.displayContainerElement = options.display_element;\n    this.displayContainerElement.appendChild(contentWrapperElement);\n    this.displayElement = contentElement;\n\n    // set experiment_width if not null\n    if (options.experiment_width !== null) {\n      this.displayElement.style.width = options.experiment_width + \"px\";\n    }\n\n    // add tabIndex attribute to scope event listeners\n    options.display_element.tabIndex = 0;\n\n    // Add CSS classes to container and display elements\n    this.displayContainerElement.classList.add(\"jspsych-display-element\");\n    this.displayElement.classList.add(\"jspsych-content\");\n\n    // create listeners for user browser interaction\n    this.data.createInteractionListeners();\n\n    // add event for closing window\n    window.addEventListener(\"beforeunload\", options.on_close);\n\n    if (this.options.show_progress_bar) {\n      const progressBarContainer = document.createElement(\"div\");\n      progressBarContainer.id = \"jspsych-progressbar-container\";\n\n      this.progressBar = new ProgressBar(progressBarContainer, this.options.message_progress_bar);\n\n      this.getDisplayContainerElement().insertAdjacentElement(\"afterbegin\", progressBarContainer);\n    }\n  }\n\n  private finishTrialPromise = new PromiseWrapper<TrialResult | void>();\n  finishTrial(data?: TrialResult) {\n    this.finishTrialPromise.resolve(data);\n  }\n\n  private timelineDependencies: TimelineNodeDependencies = {\n    onTrialStart: (trial: Trial) => {\n      this.options.on_trial_start(trial.trialObject);\n\n      // apply the focus to the element containing the experiment.\n      this.getDisplayContainerElement().focus();\n      // reset the scroll on the DOM target\n      this.getDisplayElement().scrollTop = 0;\n    },\n\n    onTrialResultAvailable: (trial: Trial) => {\n      const result = trial.getResult();\n      if (result) {\n        result.time_elapsed = this.getTotalTime();\n        this.data.write(trial);\n      }\n    },\n\n    onTrialFinished: (trial: Trial) => {\n      const result = trial.getResult();\n      this.options.on_trial_finish(result);\n\n      if (result) {\n        this.options.on_data_update(result);\n      }\n\n      if (this.progressBar && this.options.auto_update_progress_bar) {\n        this.progressBar.progress = this.timeline.getNaiveProgress();\n      }\n    },\n\n    runOnStartExtensionCallbacks: (extensionsConfiguration) =>\n      this.extensionManager.onStart(extensionsConfiguration),\n\n    runOnLoadExtensionCallbacks: (extensionsConfiguration) =>\n      this.extensionManager.onLoad(extensionsConfiguration),\n\n    runOnFinishExtensionCallbacks: (extensionsConfiguration) =>\n      this.extensionManager.onFinish(extensionsConfiguration),\n\n    getSimulationMode: () => this.simulationMode,\n\n    getGlobalSimulationOptions: () => this.simulationOptions,\n\n    instantiatePlugin: (pluginClass) => new pluginClass(this),\n\n    getDisplayElement: () => this.getDisplayElement(),\n\n    getDefaultIti: () => this.getInitSettings().default_iti,\n\n    finishTrialPromise: this.finishTrialPromise,\n\n    clearAllTimeouts: () => this.pluginAPI.clearAllTimeouts(),\n  };\n\n  private extensionManagerDependencies: ExtensionManagerDependencies = {\n    instantiateExtension: (extensionClass) => new extensionClass(this),\n  };\n\n  private dataDependencies: JsPsychDataDependencies = {\n    getProgress: () => ({\n      time: this.getTotalTime(),\n      trial: this.timeline?.getLatestNode().index ?? 0,\n    }),\n\n    onInteractionRecordAdded: (record) => {\n      this.options.on_interaction_data_update(record);\n    },\n\n    getDisplayElement: () => this.getDisplayElement(),\n  };\n}\n","export class MigrationError extends Error {\n  constructor(message = \"The global `jsPsych` variable is no longer available in jsPsych v7.\") {\n    super(\n      `${message} Please follow the migration guide at https://www.jspsych.org/7.0/support/migration-v7/ to update your experiment.`\n    );\n    this.name = \"MigrationError\";\n  }\n}\n\n// Define a global jsPsych object to handle invocations on it with migration errors\n(window as any).jsPsych = {\n  get init() {\n    throw new MigrationError(\"`jsPsych.init()` was replaced by `initJsPsych()` in jsPsych v7.\");\n  },\n\n  get data() {\n    throw new MigrationError();\n  },\n  get randomization() {\n    throw new MigrationError();\n  },\n  get turk() {\n    throw new MigrationError();\n  },\n  get pluginAPI() {\n    throw new MigrationError();\n  },\n\n  get ALL_KEYS() {\n    throw new MigrationError(\n      'jsPsych.ALL_KEYS was replaced by the \"ALL_KEYS\" string in jsPsych v7.'\n    );\n  },\n  get NO_KEYS() {\n    throw new MigrationError('jsPsych.NO_KEYS was replaced by the \"NO_KEYS\" string in jsPsych v7.');\n  },\n};\n","// __rollup-babel-import-regenerator-runtime__\n\nimport { JsPsych } from \"./JsPsych\";\nimport { MigrationError } from \"./migration\";\n\n// temporary patch for Safari\nif (\n  typeof window !== \"undefined\" &&\n  window.hasOwnProperty(\"webkitAudioContext\") &&\n  !window.hasOwnProperty(\"AudioContext\")\n) {\n  // @ts-expect-error\n  window.AudioContext = webkitAudioContext;\n}\n// end patch\n\n// The following function provides a uniform interface to initialize jsPsych, no matter whether a\n// browser supports ES6 classes or not (and whether the ES6 build or the Babel build is used).\n/**\n * Creates a new JsPsych instance using the provided options.\n *\n * @param options The options to pass to the JsPsych constructor\n * @returns A new JsPsych instance\n */\nexport function initJsPsych(options?) {\n  const jsPsych = new JsPsych(options);\n\n  // Handle invocations of non-existent v6 methods with migration errors\n  const migrationMessages = {\n    init: \"`jsPsych.init()` was replaced by `initJsPsych()` in jsPsych v7.\",\n\n    ALL_KEYS: 'jsPsych.ALL_KEYS was replaced by the \"ALL_KEYS\" string in jsPsych v7.',\n    NO_KEYS: 'jsPsych.NO_KEYS was replaced by the \"NO_KEYS\" string in jsPsych v7.',\n\n    // Getter functions that were renamed\n    currentTimelineNodeID:\n      \"`currentTimelineNodeID()` was renamed to `getCurrentTimelineNodeID()` in jsPsych v7.\",\n    progress: \"`progress()` was renamed to `getProgress()` in jsPsych v7.\",\n    startTime: \"`startTime()` was renamed to `getStartTime()` in jsPsych v7.\",\n    totalTime: \"`totalTime()` was renamed to `getTotalTime()` in jsPsych v7.\",\n    currentTrial: \"`currentTrial()` was renamed to `getCurrentTrial()` in jsPsych v7.\",\n    initSettings: \"`initSettings()` was renamed to `getInitSettings()` in jsPsych v7.\",\n    allTimelineVariables:\n      \"`allTimelineVariables()` was renamed to `getAllTimelineVariables()` in jsPsych v7.\",\n  };\n\n  Object.defineProperties(\n    jsPsych,\n    Object.fromEntries(\n      Object.entries(migrationMessages).map(([key, message]) => [\n        key,\n        {\n          get() {\n            throw new MigrationError(message);\n          },\n        },\n      ])\n    )\n  );\n\n  return jsPsych;\n}\n\nexport { JsPsych } from \"./JsPsych\";\nexport type { JsPsychPlugin, PluginInfo, TrialType } from \"./modules/plugins\";\nexport { ParameterType } from \"./modules/plugins\";\nexport type { JsPsychExtension, JsPsychExtensionInfo } from \"./modules/extensions\";\nexport { DataCollection } from \"./modules/data/DataCollection\";\n"],"names":["ParameterType","TimelineNodeStatus","path","description","version"],"mappings":"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"}